{"version":3,"file":"f57a0510413b844c725bcb542fcb7c79fa0454e7-ff1a14162261cd84fb63.js","mappings":"uNAkQA,MAtPoBA,IAAyB,IAAxB,SAAEC,EAAQ,KAAEC,GAAMF,EACnC,MAAMG,GAAWC,EAAAA,EAAAA,YAAWC,EAAAA,KAEtB,EAACC,EAAS,EAACC,IAAeC,EAAAA,EAAAA,WAAS,IACnC,EAACC,EAAa,EAACC,IAAmBF,EAAAA,EAAAA,WAAS,IAC3C,EAACG,EAAS,EAACC,IAAeJ,EAAAA,EAAAA,WAAS,IACnC,EAACK,EAAO,EAACC,IAAaN,EAAAA,EAAAA,aACtB,EAACO,EAAK,EAACC,IAAWR,EAAAA,EAAAA,UAAS,SAC3BS,GAASC,EAAAA,EAAAA,GAAUjB,IAEnB,EAACkB,EAAY,EAACC,IAAkBZ,EAAAA,EAAAA,UAA2B,oBAAXa,QAA0BA,OAAOC,OAAOC,OAExFC,EAAiBA,KAEnB,GADAV,EAAUO,OAAOI,SACdJ,OAAOI,QAAU,IAChBT,EAAQ,aACN,CACF,MAAMU,EAASL,OAAOI,QAEtBT,EADkB,IAAMU,EACJ,KACxB,IAGJC,EAAAA,EAAAA,YAAU,KACe,oBAAXN,QACNA,OAAOO,iBAAiB,UAAUC,IAC9BT,EAAeC,OAAOC,OAAOC,MAAM,GAE3C,GACD,KAEHI,EAAAA,EAAAA,YAAU,KACNN,OAAOO,iBAAiB,SAAUJ,EAAe,GAClD,IAEH,MAAMM,EAAaA,IAEXC,EAAAA,cAAA,WACIA,EAAAA,cAACC,EAAAA,GAAI,CAAEC,GAAG,KACNF,EAAAA,cAAA,OAAKG,UAAU,cAAcC,SAAUA,EAAWC,IAAKC,EAAAA,EAAMd,MAAOR,EAAMuB,IAAI,WAKxFH,EAAYN,MAiCZU,EAAcA,KAChBhC,GAAY,GACZG,GAAgB,GAChBE,GAAY,EAAM,EAwBhB4B,EAAkBA,KACpB9B,GAAgB,GAChBH,GAAY,GACZK,GAAY,EAAM,EAEhB6B,EAAeA,KACdnC,GACCC,GAAY,GAEbE,GACCC,GAAgB,GAEjBC,GACCC,GAAY,EAChB,EAGE8B,EAAeb,IACjB,GAAG3B,EAAKyC,gBAAkBd,EAAEe,OAAOC,UAC/B,OAEJ1C,EAAS,CAAE2C,KAAMjB,EAAEe,OAAOC,YAE1B,MAAME,EAAS9C,EAAS+C,SAEPD,EAAOE,MAAM,EAAE,GAGlB,OAAXhC,GACCiC,EAAAA,EAAAA,IAASC,EAAAA,EAASC,QAAQL,KAG1BG,EAAAA,EAAAA,IAAS,MAAMC,EAAAA,EAASC,QAAQL,GAAO,IAC3C,EAsBEM,EAAcA,KAChBzC,GAAY,GACZF,GAAgB,GAChBH,GAAY,EAAM,EAEhB+C,EAAoBA,IAElBvB,EAAAA,cAAA,MAAIwB,GAAG,YAAYrB,UAAU,uBACzBH,EAAAA,cAAA,MAAIG,UAAU,uBAAsBH,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,8BAA8BsB,YAAaf,EAAcR,GAAa,OAAT/B,EAAgB,IAAM,OAAQiD,EAAAA,EAASM,OAAOC,KAAKxD,KACpK6B,EAAAA,cAAA,MAAIG,UAAU,uCACVH,EAAAA,cAAA,KAAGG,UAAU,8BAA8ByB,SAAS,IAAIC,QAASrB,EAAaiB,YAAajB,GAAeY,EAAAA,EAASM,OAAOI,SAASC,MAAM5D,IACxII,GA1HTyB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,MAAIG,UAAU,cAAc6B,aAAcA,IAAMtB,IAAgBuB,OAAQA,IAAMvB,KAExEV,EAAAA,cAAA,MAAIG,UAAU,aAAYH,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,uBAAuBD,GAAa,OAAT/B,EAAgB,8BAAgC,mCAAoCiD,EAAAA,EAASM,OAAOI,SAASI,WAAW/D,KAC7L6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,uBAAuBD,GAAa,OAAT/B,EAAgB,0BAA4B,6BAA8BiD,EAAAA,EAASM,OAAOI,SAASK,cAAchE,KAChK6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,uBAAuBD,GAAa,OAAT/B,EAAgB,wBAA0B,6BAA8BiD,EAAAA,EAASM,OAAOI,SAASM,QAAQjE,KACxJ6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,uBAAuBD,GAAa,OAAT/B,EAAgB,sCAAwC,6CAA8CiD,EAAAA,EAASM,OAAOI,SAASO,aAAalE,KAC3L6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,uBAAuBD,GAAa,OAAT/B,EAAgB,uCAAyC,kCAAmCiD,EAAAA,EAASM,OAAOI,SAASQ,aAAanE,KACjL6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,uBAAuBD,GAAa,OAAT/B,EAAgB,sBAAwB,wBAAyBiD,EAAAA,EAASM,OAAOI,SAASS,SAASpE,KAClJ6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,uBAAuBD,GAAa,OAAT/B,EAAgB,0BAA4B,0BAA2BiD,EAAAA,EAASM,OAAOI,SAASU,WAAWrE,QAmH9J6B,EAAAA,cAAA,MAAIG,UAAU,uCACVH,EAAAA,cAAA,KAAGG,UAAU,8BAA8ByB,SAAS,IAAIH,YAAahB,EAAiBP,GAAG,aAAakB,EAAAA,EAASM,OAAOe,MAAMV,MAAM5D,IACjIO,GA1FTsB,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,MAAIG,UAAU,cAAc6B,aAAcA,IAAMtB,KAC5CV,EAAAA,cAAA,MAAIG,UAAU,aAAaH,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,uBAAuBD,GAAa,OAAT/B,EAAgB,gCAAkC,2BAA4BiD,EAAAA,EAASM,OAAOe,MAAMC,UAAUvE,KACpL6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,uBAAuBD,GAAa,OAAT/B,EAAgB,mCAAqC,wBAAyBiD,EAAAA,EAASM,OAAOe,MAAME,QAAQxE,KAC3J6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,uBAAuBD,GAAa,OAAT/B,EAAgB,0BAA4B,uBAAwBiD,EAAAA,EAASM,OAAOe,MAAMG,OAAOzE,QAwFpJ6B,EAAAA,cAAA,MAAIG,UAAU,uBAAsBH,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,8BAA8BsB,YAAaf,EAAcR,GAAa,OAAT/B,EAAgB,iBAAmB,oBAAqBiD,EAAAA,EAASM,OAAOmB,MAAM1E,KAC/L6B,EAAAA,cAAA,MAAIG,UAAU,uBAAsBH,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,8BAA8BsB,YAAaf,EAAcR,GAAa,OAAT/B,EAAgB,kBAAoB,sBAAuBiD,EAAAA,EAASM,OAAOoB,eAAe3E,KAC3M6B,EAAAA,cAAA,MAAIG,UAAU,+BAA8BH,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,8BAA8BsB,YAAaf,EAAcR,GAAa,OAAT/B,EAAgB,YAAc,kBAAmBiD,EAAAA,EAASM,OAAOqB,QAAQ5E,KAClM6B,EAAAA,cAAA,MAAIG,UAAU,4BACVH,EAAAA,cAAA,KAAGG,UAAU,8BAA8B0B,QAASP,EAAaG,YAAaH,EAAapB,GAAG,KAAc,OAAT/B,EAAgB,KAAO,MAErHS,GAzCboB,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,MAAIG,UAAU,cAAc6B,aAAcA,IAAMtB,KAC5CV,EAAAA,cAAA,MAAIG,UAAU,yCAAyC0B,QAASlB,GAAa,MAC7EX,EAAAA,cAAA,MAAIG,UAAU,+BAA+B0B,QAASlB,GAAa,UA4C7EqC,EAAoBA,KACtBxE,GAAaD,EAAS,EAEpB0E,EAAwBA,KAC1BtE,GAAiBD,EAAa,EAE5BwE,EAAoBA,KACtBrE,GAAaD,EAAS,EAEpBuE,EAAeA,IAEbnD,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAACoD,EAAAA,MAAI,CAACC,OAAK,EAACC,WAAY,YAAaC,iBAAkB,mBACnDvD,EAAAA,cAAA,MAAIwB,GAAG,YAAYrB,UAAU,yBACzBH,EAAAA,cAAA,MAAIG,UAAU,yBAAwBH,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,gCAAgCsB,YAAaf,EAAcR,GAAa,OAAT/B,EAAgB,IAAM,OAAQiD,EAAAA,EAASM,OAAOC,KAAKxD,KACxK6B,EAAAA,cAAA,MAAIG,UAAU,yCACVH,EAAAA,cAAA,KAAGG,UAAU,gCAAgCyB,SAAS,IAAIC,QAASmB,GAAqB5B,EAAAA,EAASM,OAAOI,SAASC,MAAM5D,IACtHI,GA7IjByB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,MAAIG,UAAU,qBAAqB6B,aAAcA,IAAMtB,IAAgBuB,OAAQA,IAAMvB,KAC/EV,EAAAA,cAAA,MAAIG,UAAU,aAAYH,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,8BAA8BD,GAAa,OAAT/B,EAAgB,8BAAgC,mCAAoCiD,EAAAA,EAASM,OAAOI,SAASI,WAAW/D,KACpM6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,8BAA8BD,GAAa,OAAT/B,EAAgB,0BAA4B,6BAA8BiD,EAAAA,EAASM,OAAOI,SAASK,cAAchE,KACvK6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,8BAA8BD,GAAa,OAAT/B,EAAgB,wBAA0B,6BAA8BiD,EAAAA,EAASM,OAAOI,SAASM,QAAQjE,KAC/J6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,uBAAuBD,GAAa,OAAT/B,EAAgB,sCAAwC,6CAA8CiD,EAAAA,EAASM,OAAOI,SAASO,aAAalE,KAC3L6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,8BAA8BD,GAAa,OAAT/B,EAAgB,uCAAyC,kCAAmCiD,EAAAA,EAASM,OAAOI,SAASQ,aAAanE,KACxL6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,8BAA8BD,GAAa,OAAT/B,EAAgB,sBAAwB,wBAAyBiD,EAAAA,EAASM,OAAOI,SAASS,SAASpE,KACzJ6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,8BAA8BD,GAAa,OAAT/B,EAAgB,0BAA4B,0BAA2BiD,EAAAA,EAASM,OAAOI,SAASU,WAAWrE,QAuI7J6B,EAAAA,cAAA,MAAIG,UAAU,yCACVH,EAAAA,cAAA,KAAGG,UAAU,gCAAgCyB,SAAS,IAAIC,QAASoB,EAAuB/C,GAAG,aAAakB,EAAAA,EAASM,OAAOe,MAAMV,MAAM5D,IACrIO,GAlHjBsB,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,MAAIG,UAAU,qBAAqB6B,aAAcA,IAAMtB,KACnDV,EAAAA,cAAA,MAAIG,UAAU,aAAaH,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,8BAA8BD,GAAa,OAAT/B,EAAgB,gCAAkC,2BAA4BiD,EAAAA,EAASM,OAAOe,MAAMC,UAAUvE,KAC3L6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,8BAA8BD,GAAa,OAAT/B,EAAgB,mCAAqC,wBAAyBiD,EAAAA,EAASM,OAAOe,MAAME,QAAQxE,KAClK6B,EAAAA,cAAA,UAAIA,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,8BAA8BD,GAAa,OAAT/B,EAAgB,0BAA4B,uBAAwBiD,EAAAA,EAASM,OAAOe,MAAMG,OAAOzE,QAgHnJ6B,EAAAA,cAAA,MAAIG,UAAU,yBAAwBH,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,gCAAgCsB,YAAaf,EAAcR,GAAa,OAAT/B,EAAgB,iBAAmB,oBAAqBiD,EAAAA,EAASM,OAAOmB,MAAM1E,KACnM6B,EAAAA,cAAA,MAAIG,UAAU,yBAAwBH,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,gCAAgCsB,YAAaf,EAAcR,GAAa,OAAT/B,EAAgB,kBAAoB,sBAAuBiD,EAAAA,EAASM,OAAOoB,eAAe3E,KAC/M6B,EAAAA,cAAA,MAAIG,UAAU,uDAAsDH,EAAAA,cAACC,EAAAA,GAAI,CAACE,UAAU,gCAAgCsB,YAAaf,EAAcR,GAAa,OAAT/B,EAAgB,YAAc,kBAAmBiD,EAAAA,EAASM,OAAOqB,QAAQ5E,KAC5N6B,EAAAA,cAAA,MAAIG,UAAU,oDACVH,EAAAA,cAAA,KAAGG,UAAU,gCAAgC0B,QAASqB,EAAmBhD,GAAG,KAAc,OAAT/B,EAAgB,KAAO,MACnGS,GAjErBoB,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,MAAIG,UAAU,qBAAqB6B,aAAcA,IAAMtB,KACnDV,EAAAA,cAAA,MAAIG,UAAU,gDAAgD0B,QAASlB,GAAa,MACpFX,EAAAA,cAAA,MAAIG,UAAU,sCAAsC0B,QAASlB,GAAa,YAsE1F,OAAGvB,EAAc,KAETY,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,OAAKwB,GAAG,kBAAkBrB,UAAU,oBAC/BJ,IACAwB,MAMTvB,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,OAAKwB,GAAG,kBAAkBrB,UAAU,oBAC/BJ,IACAoD,KAIjB,E,mEC7LJ,MAnDelF,IAAiC,IAAhC,SAAEuF,EAAQ,aAAEC,GAAcxF,EACtC,MAAMC,GAAWwF,EAAAA,EAAAA,eACXvF,GAAOwF,EAAAA,EAAAA,GAAQzF,GA0BrB,OACI8B,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAC4D,EAAM,CAAC1F,SAAUuF,EAActF,KAAMA,IACtC6B,EAAAA,cAAC6D,EAAAA,GAAa,CACdC,kBAAkB,WAClBC,qBAAmB,EACnBC,WAAW,UACXC,MAAO,CACHC,gBAAiB,0BAErBC,SAjBSA,MACbC,EAAAA,EAAAA,oBAAmBlG,EAAS,EAiBxBmG,qBAAqB,wBACrBC,cAAc,qBACdC,qBAAqB,sBACrBC,WAAW,cAEXC,UAnBUA,QAnBVzE,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,OAAKG,UAAU,qBACXH,EAAAA,cAAA,KAAGG,UAAU,iBAAgB,+BAC7BH,EAAAA,cAAA,SAAG,qhBAEwCA,EAAAA,cAAA,KAAG0E,KAAMC,EAAAA,EAAe9D,OAAO,UAAS,uBAAuB,KAE1Gb,EAAAA,cAAA,WACAA,EAAAA,cAAA,SAAG,0JAgCXA,EAAAA,cAAA,YAAOwD,GACPxD,EAAAA,cAAC4E,EAAAA,EAAM,CAACzG,KAAMA,IACf,C,+CCrCX,IApBeF,IAA4D,IAA3D,KAAE4G,EAAI,MAAEZ,EAAK,MAAEzE,EAAK,SAAEgE,EAAQ,cAAEsB,EAAa,KAAE/D,GAAM9C,EASjE,OACI+B,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,OAAKG,UAAU,oBACVY,EACCf,EAAAA,cAAA,UAAQe,KAAMA,EAAOZ,UAAS,GAAK8D,GAAUT,GAC7CxD,EAAAA,cAAA,UAASG,UAAS,GAAK8D,EAAUpC,QAAU/B,GAZxCA,KACVgF,EACCA,EAAchF,IAEdqB,EAAAA,EAAAA,IAAS0D,EACb,EAO2DhD,CAAQ/B,IAAK0D,IAGrE,C,sECpBPuB,EAAmBC,GAA6B,aAAjBA,EAAQjE,KAEvCkE,EAAgBC,GAAUA,aAAiBC,KAE3CC,EAAqBF,GAAmB,MAATA,EAEnC,MAAMG,EAAgBH,GAA2B,iBAAVA,EACvC,IAAII,EAAYJ,IAAWE,EAAkBF,KACxCK,MAAMC,QAAQN,IACfG,EAAaH,KACZD,EAAaC,GAEdO,EAAiBC,GAAUJ,EAASI,IAAUA,EAAM7E,OAClDkE,EAAgBW,EAAM7E,QAClB6E,EAAM7E,OAAO8E,QACbD,EAAM7E,OAAOqE,MACjBQ,EAIFE,EAAqB,CAACC,EAAOC,IAASD,EAAME,IAFxB,CAACD,GAASA,EAAKE,UAAU,EAAGF,EAAKG,OAAO,iBAAmBH,EAE/BI,CAAkBJ,IAElEK,EAAiBC,IACjB,MAAMC,EAAgBD,EAAWE,aAAeF,EAAWE,YAAYC,UACvE,OAAQjB,EAASe,IAAkBA,EAAcG,eAAe,gBAAiB,EAGjFC,EAA0B,oBAAXnH,aACe,IAAvBA,OAAOoH,aACM,oBAAbC,SAEX,SAASC,EAAYC,GACjB,IAAIC,EACJ,MAAMtB,EAAUD,MAAMC,QAAQqB,GAC9B,GAAIA,aAAgB1B,KAChB2B,EAAO,IAAI3B,KAAK0B,QAEf,GAAIA,aAAgBE,IACrBD,EAAO,IAAIC,IAAIF,OAEd,IAAMJ,IAAUI,aAAgBG,MAAQH,aAAgBI,YACxDzB,IAAWF,EAASuB,GAcrB,OAAOA,EAZP,GADAC,EAAOtB,EAAU,GAAK,CAAC,EAClBA,GAAYW,EAAcU,GAI3B,IAAK,MAAMK,KAAOL,EACVA,EAAKL,eAAeU,KACpBJ,EAAKI,GAAON,EAAYC,EAAKK,UALrCJ,EAAOD,CAYf,CACA,OAAOC,CACX,CAEA,IAAIK,EAAWjC,GAAUK,MAAMC,QAAQN,GAASA,EAAMkC,OAAOC,SAAW,GAEpEC,EAAeC,QAAgBC,IAARD,EAEvBE,EAAM,CAACC,EAAKC,EAAMC,KAClB,IAAKD,IAASrC,EAASoC,GACnB,OAAOE,EAEX,MAAMC,EAASV,EAAQQ,EAAKG,MAAM,cAAcC,QAAO,CAACF,EAAQX,IAAQ9B,EAAkByC,GAAUA,EAASA,EAAOX,IAAMQ,GAC1H,OAAOJ,EAAYO,IAAWA,IAAWH,EACnCJ,EAAYI,EAAIC,IACZC,EACAF,EAAIC,GACRE,CAAM,EAGhB,MAAMG,EAAS,CACXC,KAAM,OACNC,UAAW,WACXC,OAAQ,UAENC,EAAkB,CACpBnG,OAAQ,SACRoG,SAAU,WACVC,SAAU,WACVC,UAAW,YACXC,IAAK,OAEHC,EACG,MADHA,EAEG,MAFHA,EAGS,YAHTA,EAIS,YAJTA,EAKO,UALPA,EAMQ,WANRA,EAOQ,WAGU,gBAAoB,MAmE5C,IAAIC,EAAoB,CAACC,EAAWC,EAASC,EAAqBC,GAAS,KACvE,MAAMjB,EAAS,CACXkB,cAAeH,EAAQI,gBAE3B,IAAK,MAAM9B,KAAOyB,EACdM,OAAOC,eAAerB,EAAQX,EAAK,CAC/BO,IAAK,KACD,MAAM0B,EAAOjC,EAKb,OAJI0B,EAAQQ,gBAAgBD,KAAUf,EAAgBI,MAClDI,EAAQQ,gBAAgBD,IAASL,GAAUV,EAAgBI,KAE/DK,IAAwBA,EAAoBM,IAAQ,GAC7CR,EAAUQ,EAAK,IAIlC,OAAOtB,CAAM,EAGbwB,EAAiBnE,GAAUI,EAASJ,KAAW+D,OAAOK,KAAKpE,GAAOqE,OAElEC,EAAwB,CAACC,EAAeL,EAAiBM,EAAiBZ,KAC1EY,EAAgBD,GAChB,MAAM,KAAE3D,KAAS6C,GAAcc,EAC/B,OAAQJ,EAAcV,IAClBM,OAAOK,KAAKX,GAAWY,QAAUN,OAAOK,KAAKF,GAAiBG,QAC9DN,OAAOK,KAAKX,GAAWgB,MAAMzC,GAAQkC,EAAgBlC,OAC/C4B,GAAUV,EAAgBI,MAAM,EAG1CoB,EAAyB1E,GAAWK,MAAMC,QAAQN,GAASA,EAAQ,CAACA,GAaxE,SAAS2E,EAAaC,GAClB,MAAMC,EAAS,SAAaD,GAC5BC,EAAOC,QAAUF,EACjB,aAAgB,KACZ,MAAMG,GAAgBH,EAAMI,UACxBH,EAAOC,QAAQG,SACfJ,EAAOC,QAAQG,QAAQC,UAAU,CAC7BC,KAAMN,EAAOC,QAAQK,OAE7B,MAAO,KACHJ,GAAgBA,EAAaK,aAAa,CAC7C,GACF,CAACR,EAAMI,UACd,CAqEA,IAAIK,EAAYrF,GAA2B,iBAAVA,EAE7BsF,EAAsB,CAAC3E,EAAO4E,EAAQC,EAAYC,EAAU/C,IACxD2C,EAAS1E,IACT8E,GAAYF,EAAOG,MAAMC,IAAIhF,GACtB4B,EAAIiD,EAAY7E,EAAO+B,IAE9BrC,MAAMC,QAAQK,GACPA,EAAMiF,KAAKC,IAAeJ,GAAYF,EAAOG,MAAMC,IAAIE,GAAYtD,EAAIiD,EAAYK,OAE9FJ,IAAaF,EAAOO,UAAW,GACxBN,GAsCX,IAAIO,EAAS/F,GAAU,QAAQgG,KAAKhG,GAEhCiG,EAAgBC,GAAUjE,EAAQiE,EAAMC,QAAQ,YAAa,IAAIvD,MAAM,UAE3E,SAASwD,EAAIC,EAAQ5D,EAAMzC,GACvB,IAAIsG,GAAS,EACb,MAAMC,EAAWR,EAAMtD,GAAQ,CAACA,GAAQwD,EAAaxD,GAC/C4B,EAASkC,EAASlC,OAClBmC,EAAYnC,EAAS,EAC3B,OAASiC,EAAQjC,GAAQ,CACrB,MAAMrC,EAAMuE,EAASD,GACrB,IAAIG,EAAWzG,EACf,GAAIsG,IAAUE,EAAW,CACrB,MAAME,EAAWL,EAAOrE,GACxByE,EACIrG,EAASsG,IAAarG,MAAMC,QAAQoG,GAC9BA,EACCC,OAAOJ,EAASD,EAAQ,IAErB,CAAC,EADD,EAElB,CACAD,EAAOrE,GAAOyE,EACdJ,EAASA,EAAOrE,EACpB,CACA,OAAOqE,CACX,CA+QA,IAAIO,EAAe,CAAChG,EAAMiG,EAA0BC,EAAQjL,EAAMkL,IAAYF,EACxE,IACKC,EAAOlG,GACVoG,MAAO,IACCF,EAAOlG,IAASkG,EAAOlG,GAAMoG,MAAQF,EAAOlG,GAAMoG,MAAQ,CAAC,EAC/D,CAACnL,GAAOkL,IAAW,IAGzB,CAAC,EAEP,MAAME,EAAe,CAACC,EAAQC,EAAUC,KACpC,IAAK,MAAMpF,KAAOoF,GAAerD,OAAOK,KAAK8C,GAAS,CAClD,MAAMG,EAAQ9E,EAAI2E,EAAQlF,GAC1B,GAAIqF,EAAO,CACP,MAAM,GAAEC,KAAOC,GAAiBF,EAChC,GAAIC,GAAMH,EAASG,EAAG1G,MAAO,CACzB,GAAI0G,EAAGE,IAAIC,MAAO,CACdH,EAAGE,IAAIC,QACP,KACJ,CACK,GAAIH,EAAGI,MAAQJ,EAAGI,KAAK,GAAGD,MAAO,CAClCH,EAAGI,KAAK,GAAGD,QACX,KACJ,CACJ,MACSrH,EAASmH,IACdN,EAAaM,EAAcJ,EAEnC,CACJ,GAGJ,IAaIQ,EAAsBC,IAAS,CAC/BC,YAAaD,GAAQA,IAAS1E,EAAgBE,SAC9C0E,SAAUF,IAAS1E,EAAgBnG,OACnCgL,WAAYH,IAAS1E,EAAgBC,SACrC6E,QAASJ,IAAS1E,EAAgBI,IAClC2E,UAAWL,IAAS1E,EAAgBG,YAGpC6E,EAAY,CAACtH,EAAM2E,EAAQ4C,KAAiBA,IAC3C5C,EAAOO,UACJP,EAAOG,MAAM7E,IAAID,IACjB,IAAI2E,EAAOG,OAAO0C,MAAMC,GAAczH,EAAK0H,WAAWD,IAClD,SAASrC,KAAKpF,EAAK5E,MAAMqM,EAAUhE,YAE3CkE,EAA4B,CAACzB,EAAQ0B,EAAO5H,KAC5C,MAAM6H,EAAmBxG,EAAQM,EAAIuE,EAAQlG,IAG7C,OAFAwF,EAAIqC,EAAkB,OAAQD,EAAM5H,IACpCwF,EAAIU,EAAQlG,EAAM6H,GACX3B,CAAM,EAGb4B,EAAa1I,GAA2B,kBAAVA,EAE9B2I,EAAe7I,GAA6B,SAAjBA,EAAQjE,KAEnC+M,EAAc5I,GAA2B,mBAAVA,EAE/B6I,EAAiB7I,IACjB,IAAKuB,EACD,OAAO,EAEX,MAAMuH,EAAQ9I,EAAQA,EAAM+I,cAAgB,EAC5C,OAAQ/I,aACH8I,GAASA,EAAME,YAAcF,EAAME,YAAYxH,YAAcA,YAAa,EAG/EyH,EAAajJ,GAAUqF,EAASrF,GAEhCkJ,EAAgBpJ,GAA6B,UAAjBA,EAAQjE,KAEpCsN,EAAWnJ,GAAUA,aAAiBoJ,OAE1C,MAAMC,EAAgB,CAClBrJ,OAAO,EACPsJ,SAAS,GAEPC,EAAc,CAAEvJ,OAAO,EAAMsJ,SAAS,GAC5C,IAAIE,EAAoBC,IACpB,GAAIpJ,MAAMC,QAAQmJ,GAAU,CACxB,GAAIA,EAAQpF,OAAS,EAAG,CACpB,MAAM3G,EAAS+L,EACVvH,QAAQwH,GAAWA,GAAUA,EAAOjJ,UAAYiJ,EAAO1E,WACvDY,KAAK8D,GAAWA,EAAO1J,QAC5B,MAAO,CAAEA,MAAOtC,EAAQ4L,UAAW5L,EAAO2G,OAC9C,CACA,OAAOoF,EAAQ,GAAGhJ,UAAYgJ,EAAQ,GAAGzE,SAEjCyE,EAAQ,GAAGE,aAAevH,EAAYqH,EAAQ,GAAGE,WAAW3J,OACtDoC,EAAYqH,EAAQ,GAAGzJ,QAA+B,KAArByJ,EAAQ,GAAGzJ,MACxCuJ,EACA,CAAEvJ,MAAOyJ,EAAQ,GAAGzJ,MAAOsJ,SAAS,GACxCC,EACRF,CACV,CACA,OAAOA,CAAa,EAGxB,MAAMO,EAAgB,CAClBN,SAAS,EACTtJ,MAAO,MAEX,IAAI6J,EAAiBJ,GAAYpJ,MAAMC,QAAQmJ,GACzCA,EAAQ5G,QAAO,CAACiH,EAAUJ,IAAWA,GAAUA,EAAOjJ,UAAYiJ,EAAO1E,SACrE,CACEsE,SAAS,EACTtJ,MAAO0J,EAAO1J,OAEhB8J,GAAUF,GACdA,EAEN,SAASG,EAAiBpH,EAAQ6E,EAAK3L,EAAO,YAC1C,GAAIoN,EAAUtG,IACTtC,MAAMC,QAAQqC,IAAWA,EAAOqH,MAAMf,IACtCP,EAAU/F,KAAYA,EACvB,MAAO,CACH9G,OACAkL,QAASkC,EAAUtG,GAAUA,EAAS,GACtC6E,MAGZ,CAEA,IAAIyC,GAAsBC,GAAmB9J,EAAS8J,KAAoBf,EAAQe,GAC5EA,EACA,CACElK,MAAOkK,EACPnD,QAAS,IAGboD,GAAgBC,MAAO/C,EAAO7B,EAAYqB,EAA0BwD,EAA2BC,KAC/F,MAAM,IAAE9C,EAAG,KAAEE,EAAI,SAAE6C,EAAQ,UAAEC,EAAS,UAAEC,EAAS,IAAEC,EAAG,IAAEC,EAAG,QAAEC,EAAO,SAAEC,EAAQ,KAAEjK,EAAI,cAAEkK,EAAa,MAAEC,EAAK,SAAE/F,GAAcqC,EAAMC,GAC1H0D,EAAazI,EAAIiD,EAAY5E,GACnC,IAAKmK,GAAS/F,EACV,MAAO,CAAC,EAEZ,MAAMiG,EAAWvD,EAAOA,EAAK,GAAKF,EAC5B0D,EAAqBnE,IACnBsD,GAA6BY,EAASE,iBACtCF,EAASC,kBAAkBxC,EAAU3B,GAAW,GAAKA,GAAW,IAChEkE,EAASE,iBACb,EAEE3C,EAAQ,CAAC,EACT4C,EAAUlC,EAAa1B,GACvB6D,EAAaxL,EAAgB2H,GAC7B8D,EAAoBF,GAAWC,EAC/BE,GAAYT,GAAiBnC,EAAYnB,KAC3CpF,EAAYoF,EAAIxH,QAChBoC,EAAY4I,IACXnC,EAAcrB,IAAsB,KAAdA,EAAIxH,OACZ,KAAfgL,GACC3K,MAAMC,QAAQ0K,KAAgBA,EAAW3G,OACxCmH,EAAoB5E,EAAa6E,KAAK,KAAM7K,EAAMiG,EAA0B2B,GAC5EkD,EAAmB,CAACC,EAAWC,EAAkBC,EAAkBC,EAAUvI,EAAkCwI,EAAUxI,KAC3H,MAAMwD,EAAU4E,EAAYC,EAAmBC,EAC/CrD,EAAM5H,GAAQ,CACV/E,KAAM8P,EAAYG,EAAUC,EAC5BhF,UACAS,SACGgE,EAAkBG,EAAYG,EAAUC,EAAShF,GACvD,EAEL,GAAIuD,GACGjK,MAAMC,QAAQ0K,KAAgBA,EAAW3G,OAC1CkG,KACKe,IAAsBC,GAAWrL,EAAkB8K,KACjDtC,EAAUsC,KAAgBA,GAC1BK,IAAe7B,EAAiB9B,GAAM4B,SACtC8B,IAAYvB,EAAcnC,GAAM4B,SAAW,CACpD,MAAM,MAAEtJ,EAAK,QAAE+G,GAAYkC,EAAUsB,GAC/B,CAAEvK,QAASuK,EAAUxD,QAASwD,GAC9BN,GAAmBM,GACzB,GAAIvK,IACAwI,EAAM5H,GAAQ,CACV/E,KAAM0H,EACNwD,UACAS,IAAKyD,KACFO,EAAkBjI,EAAiCwD,KAErDF,GAED,OADAqE,EAAkBnE,GACXyB,CAGnB,CACA,KAAK+C,GAAarL,EAAkBwK,IAASxK,EAAkByK,IAAO,CAClE,IAAIgB,EACAK,EACJ,MAAMC,EAAYhC,GAAmBU,GAC/BuB,EAAYjC,GAAmBS,GACrC,GAAKxK,EAAkB8K,IAAgBrE,MAAMqE,GAUxC,CACD,MAAMmB,EAAY3E,EAAI4E,aAAe,IAAInM,KAAK+K,GACxCqB,EAAqBC,GAAS,IAAIrM,MAAK,IAAIA,MAAOsM,eAAiB,IAAMD,GACzEE,EAAqB,QAAZhF,EAAI3L,KACb4Q,EAAqB,QAAZjF,EAAI3L,KACfwJ,EAAS4G,EAAUjM,QAAUgL,IAC7BW,EAAYa,EACNH,EAAkBrB,GAAcqB,EAAkBJ,EAAUjM,OAC5DyM,EACIzB,EAAaiB,EAAUjM,MACvBmM,EAAY,IAAIlM,KAAKgM,EAAUjM,QAEzCqF,EAAS6G,EAAUlM,QAAUgL,IAC7BgB,EAAYQ,EACNH,EAAkBrB,GAAcqB,EAAkBH,EAAUlM,OAC5DyM,EACIzB,EAAakB,EAAUlM,MACvBmM,EAAY,IAAIlM,KAAKiM,EAAUlM,OAEjD,KA7B0D,CACtD,MAAM0M,EAAclF,EAAIsD,gBACnBE,GAAcA,EAAaA,GAC3B9K,EAAkB+L,EAAUjM,SAC7B2L,EAAYe,EAAcT,EAAUjM,OAEnCE,EAAkBgM,EAAUlM,SAC7BgM,EAAYU,EAAcR,EAAUlM,MAE5C,CAqBA,IAAI2L,GAAaK,KACbN,IAAmBC,EAAWM,EAAUlF,QAASmF,EAAUnF,QAASxD,EAA4BA,IAC3FsD,GAED,OADAqE,EAAkB1C,EAAM5H,GAAMmG,SACvByB,CAGnB,CACA,IAAKgC,GAAaC,KACbc,IACAlG,EAAS2F,IAAgBV,GAAgBjK,MAAMC,QAAQ0K,IAAe,CACvE,MAAM2B,EAAkB1C,GAAmBO,GACrCoC,EAAkB3C,GAAmBQ,GACrCkB,GAAazL,EAAkByM,EAAgB3M,QACjDgL,EAAW3G,QAAUsI,EAAgB3M,MACnCgM,GAAa9L,EAAkB0M,EAAgB5M,QACjDgL,EAAW3G,QAAUuI,EAAgB5M,MACzC,IAAI2L,GAAaK,KACbN,EAAiBC,EAAWgB,EAAgB5F,QAAS6F,EAAgB7F,UAChEF,GAED,OADAqE,EAAkB1C,EAAM5H,GAAMmG,SACvByB,CAGnB,CACA,GAAIoC,IAAYW,GAAWlG,EAAS2F,GAAa,CAC7C,MAAQhL,MAAO6M,EAAY,QAAE9F,GAAYkD,GAAmBW,GAC5D,GAAIzB,EAAQ0D,KAAkB7B,EAAW8B,MAAMD,KAC3CrE,EAAM5H,GAAQ,CACV/E,KAAM0H,EACNwD,UACAS,SACGgE,EAAkBjI,EAAgCwD,KAEpDF,GAED,OADAqE,EAAkBnE,GACXyB,CAGnB,CACA,GAAIqC,EACA,GAAIjC,EAAWiC,GAAW,CACtB,MACMkC,EAAgBhD,QADDc,EAASG,EAAYxF,GACKyF,GAC/C,GAAI8B,IACAvE,EAAM5H,GAAQ,IACPmM,KACAvB,EAAkBjI,EAAiCwJ,EAAchG,WAEnEF,GAED,OADAqE,EAAkB6B,EAAchG,SACzByB,CAGnB,MACK,GAAIpI,EAASyK,GAAW,CACzB,IAAImC,EAAmB,CAAC,EACxB,IAAK,MAAMhL,KAAO6I,EAAU,CACxB,IAAK1G,EAAc6I,KAAsBnG,EACrC,MAEJ,MAAMkG,EAAgBhD,QAAuBc,EAAS7I,GAAKgJ,EAAYxF,GAAayF,EAAUjJ,GAC1F+K,IACAC,EAAmB,IACZD,KACAvB,EAAkBxJ,EAAK+K,EAAchG,UAE5CmE,EAAkB6B,EAAchG,SAC5BF,IACA2B,EAAM5H,GAAQoM,GAG1B,CACA,IAAK7I,EAAc6I,KACfxE,EAAM5H,GAAQ,CACV4G,IAAKyD,KACF+B,IAEFnG,GACD,OAAO2B,CAGnB,CAGJ,OADA0C,GAAkB,GACX1C,CAAK,EAiEhB,SAASyE,GAAM5G,EAAQ5D,GACnB,MAAMyK,EAAQ7M,MAAMC,QAAQmC,GACtBA,EACAsD,EAAMtD,GACF,CAACA,GACDwD,EAAaxD,GACjB0K,EAA+B,IAAjBD,EAAM7I,OAAegC,EAtB7C,SAAiBA,EAAQ+G,GACrB,MAAM/I,EAAS+I,EAAWpR,MAAM,GAAI,GAAGqI,OACvC,IAAIiC,EAAQ,EACZ,KAAOA,EAAQjC,GACXgC,EAASjE,EAAYiE,GAAUC,IAAUD,EAAO+G,EAAW9G,MAE/D,OAAOD,CACX,CAesDgH,CAAQhH,EAAQ6G,GAC5D5G,EAAQ4G,EAAM7I,OAAS,EACvBrC,EAAMkL,EAAM5G,GASlB,OARI6G,UACOA,EAAYnL,GAET,IAAVsE,IACElG,EAAS+M,IAAgBhJ,EAAcgJ,IACpC9M,MAAMC,QAAQ6M,IAtB3B,SAAsB3K,GAClB,IAAK,MAAMR,KAAOQ,EACd,GAAIA,EAAIlB,eAAeU,KAASI,EAAYI,EAAIR,IAC5C,OAAO,EAGf,OAAO,CACX,CAe2CsL,CAAaH,KAChDF,GAAM5G,EAAQ6G,EAAMlR,MAAM,GAAI,IAE3BqK,CACX,CAmOA,SAASkH,KACL,IAAIC,EAAa,GAiBjB,MAAO,CACH,aAAIC,GACA,OAAOD,CACX,EACArI,KApBUnF,IACV,IAAK,MAAM0N,KAAYF,EACnBE,EAASvI,MAAQuI,EAASvI,KAAKnF,EACnC,EAkBAkF,UAhBewI,IACfF,EAAWG,KAAKD,GACT,CACHtI,YAAa,KACToI,EAAaA,EAAWtL,QAAQ0L,GAAMA,IAAMF,GAAS,IAa7DtI,YATgB,KAChBoI,EAAa,EAAE,EAUvB,CAEA,IAAIK,GAAe7N,GAAUE,EAAkBF,KAAWG,EAAaH,GAEvE,SAAS8N,GAAUC,EAASC,GACxB,GAAIH,GAAYE,IAAYF,GAAYG,GACpC,OAAOD,IAAYC,EAEvB,GAAIjO,EAAagO,IAAYhO,EAAaiO,GACtC,OAAOD,EAAQE,YAAcD,EAAQC,UAEzC,MAAMC,EAAQnK,OAAOK,KAAK2J,GACpBI,EAAQpK,OAAOK,KAAK4J,GAC1B,GAAIE,EAAM7J,SAAW8J,EAAM9J,OACvB,OAAO,EAEX,IAAK,MAAMrC,KAAOkM,EAAO,CACrB,MAAME,EAAOL,EAAQ/L,GACrB,IAAKmM,EAAME,SAASrM,GAChB,OAAO,EAEX,GAAY,QAARA,EAAe,CACf,MAAMsM,EAAON,EAAQhM,GACrB,GAAKjC,EAAaqO,IAASrO,EAAauO,IACnClO,EAASgO,IAAShO,EAASkO,IAC3BjO,MAAMC,QAAQ8N,IAAS/N,MAAMC,QAAQgO,IACnCR,GAAUM,EAAME,GACjBF,IAASE,EACX,OAAO,CAEf,CACJ,CACA,OAAO,CACX,CAEA,IAAIC,GAAoBzO,GAA6B,oBAAjBA,EAAQjE,KAExCyP,GAAqB9D,GAAQ0B,EAAa1B,IAAQ3H,EAAgB2H,GAElEgH,GAAQhH,GAAQqB,EAAcrB,IAAQA,EAAIiH,YAE1CC,GAAqB/M,IACrB,IAAK,MAAMK,KAAOL,EACd,GAAIiH,EAAWjH,EAAKK,IAChB,OAAO,EAGf,OAAO,CAAK,EAGhB,SAAS2M,GAAgBhN,EAAMuF,EAAS,CAAC,GACrC,MAAM0H,EAAoBvO,MAAMC,QAAQqB,GACxC,GAAIvB,EAASuB,IAASiN,EAClB,IAAK,MAAM5M,KAAOL,EACVtB,MAAMC,QAAQqB,EAAKK,KAClB5B,EAASuB,EAAKK,MAAU0M,GAAkB/M,EAAKK,KAChDkF,EAAOlF,GAAO3B,MAAMC,QAAQqB,EAAKK,IAAQ,GAAK,CAAC,EAC/C2M,GAAgBhN,EAAKK,GAAMkF,EAAOlF,KAE5B9B,EAAkByB,EAAKK,MAC7BkF,EAAOlF,IAAO,GAI1B,OAAOkF,CACX,CACA,SAAS2H,GAAgClN,EAAM6D,EAAYsJ,GACvD,MAAMF,EAAoBvO,MAAMC,QAAQqB,GACxC,GAAIvB,EAASuB,IAASiN,EAClB,IAAK,MAAM5M,KAAOL,EACVtB,MAAMC,QAAQqB,EAAKK,KAClB5B,EAASuB,EAAKK,MAAU0M,GAAkB/M,EAAKK,IAC5CI,EAAYoD,IACZqI,GAAYiB,EAAsB9M,IAClC8M,EAAsB9M,GAAO3B,MAAMC,QAAQqB,EAAKK,IAC1C2M,GAAgBhN,EAAKK,GAAM,IAC3B,IAAK2M,GAAgBhN,EAAKK,KAGhC6M,GAAgClN,EAAKK,GAAM9B,EAAkBsF,GAAc,CAAC,EAAIA,EAAWxD,GAAM8M,EAAsB9M,IAI3H8M,EAAsB9M,IAAQ8L,GAAUnM,EAAKK,GAAMwD,EAAWxD,IAI1E,OAAO8M,CACX,CACA,IAAIC,GAAiB,CAAClL,EAAe2B,IAAeqJ,GAAgChL,EAAe2B,EAAYmJ,GAAgBnJ,IAE3HwJ,GAAkB,CAAChP,GAAS8K,gBAAesB,cAAa6C,gBAAiB7M,EAAYpC,GACnFA,EACA8K,EACc,KAAV9K,EACIkP,IACAlP,GACKA,EACDA,EACRoM,GAAe/G,EAASrF,GACpB,IAAIC,KAAKD,GACTiP,EACIA,EAAWjP,GACXA,EAElB,SAASmP,GAAc7H,GACnB,MAAME,EAAMF,EAAGE,IACf,KAAIF,EAAGI,KAAOJ,EAAGI,KAAKsC,OAAOxC,GAAQA,EAAIxC,WAAYwC,EAAIxC,UAGzD,OAAI2D,EAAYnB,GACLA,EAAI4H,MAEXlG,EAAa1B,GACNqC,EAAcvC,EAAGI,MAAM1H,MAE9BuO,GAAiB/G,GACV,IAAIA,EAAI6H,iBAAiBzJ,KAAI,EAAG5F,WAAYA,IAEnDH,EAAgB2H,GACTgC,EAAiBlC,EAAGI,MAAM1H,MAE9BgP,GAAgB5M,EAAYoF,EAAIxH,OAASsH,EAAGE,IAAIxH,MAAQwH,EAAIxH,MAAOsH,EAC9E,CAEA,IAAIgI,GAAqB,CAAClI,EAAamI,EAASC,EAAcnF,KAC1D,MAAMnD,EAAS,CAAC,EAChB,IAAK,MAAMtG,KAAQwG,EAAa,CAC5B,MAAMC,EAAQ9E,EAAIgN,EAAS3O,GAC3ByG,GAASjB,EAAIc,EAAQtG,EAAMyG,EAAMC,GACrC,CACA,MAAO,CACHkI,eACA7O,MAAO,IAAIyG,GACXF,SACAmD,4BACH,EAGDoF,GAAgBC,GAAStN,EAAYsN,GACnCA,EACAvG,EAAQuG,GACJA,EAAKC,OACLvP,EAASsP,GACLvG,EAAQuG,EAAK1P,OACT0P,EAAK1P,MAAM2P,OACXD,EAAK1P,MACT0P,EAEVE,GAAiBnG,GAAYA,EAAQsB,QACpCtB,EAAQc,UACLd,EAAQiB,KACRjB,EAAQkB,KACRlB,EAAQe,WACRf,EAAQgB,WACRhB,EAAQmB,SACRnB,EAAQoB,UAEhB,SAASgF,GAAkB/I,EAAQyI,EAAS3O,GACxC,MAAM4H,EAAQjG,EAAIuE,EAAQlG,GAC1B,GAAI4H,GAASzC,EAAMnF,GACf,MAAO,CACH4H,QACA5H,QAGR,MAAMD,EAAQC,EAAKgC,MAAM,KACzB,KAAOjC,EAAM0D,QAAQ,CACjB,MAAMwB,EAAYlF,EAAMmP,KAAK,KACvBzI,EAAQ9E,EAAIgN,EAAS1J,GACrBkK,EAAaxN,EAAIuE,EAAQjB,GAC/B,GAAIwB,IAAUhH,MAAMC,QAAQ+G,IAAUzG,IAASiF,EAC3C,MAAO,CAAEjF,QAEb,GAAImP,GAAcA,EAAWlU,KACzB,MAAO,CACH+E,KAAMiF,EACN2C,MAAOuH,GAGfpP,EAAMqP,KACV,CACA,MAAO,CACHpP,OAER,CAEA,IAAIqP,GAAiB,CAAC9H,EAAa+H,EAAWC,EAAaC,EAAgBxI,KACnEA,EAAKI,WAGCmI,GAAevI,EAAKK,YACjBiI,GAAa/H,IAEjBgI,EAAcC,EAAetI,SAAWF,EAAKE,WAC1CK,IAEHgI,EAAcC,EAAerI,WAAaH,EAAKG,aAC7CI,GAKXkI,GAAkB,CAAC7I,EAAK5G,KAAUqB,EAAQM,EAAIiF,EAAK5G,IAAOyD,QAAU4I,GAAMzF,EAAK5G,GAEnF,MAAM0P,GAAiB,CACnB1I,KAAM1E,EAAgBE,SACtBgN,eAAgBlN,EAAgBC,SAChCoN,kBAAkB,GAEtB,SAASC,GAAkB5L,EAAQ,CAAC,EAAG6L,GACnC,IAmCIC,EAnCAC,EAAW,IACRL,MACA1L,GAEHgM,EAAa,CACbC,YAAa,EACbC,SAAS,EACTC,UAAWnI,EAAW+H,EAAS9M,eAC/BmN,cAAc,EACdb,aAAa,EACbc,cAAc,EACdC,oBAAoB,EACpB5H,SAAS,EACT6H,cAAe,CAAC,EAChBC,YAAa,CAAC,EACdtK,OAAQ,CAAC,GAETyI,EAAU,CAAC,EACXzL,GAAiB1D,EAASuQ,EAAS9M,gBAAkBzD,EAASuQ,EAASjT,UACrEgE,EAAYiP,EAAS9M,eAAiB8M,EAASjT,SAC/C,CAAC,EACH2T,EAAcV,EAASW,iBACrB,CAAC,EACD5P,EAAYoC,GACdyN,EAAS,CACTC,QAAQ,EACRzG,OAAO,EACPrF,OAAO,GAEPH,EAAS,CACTwF,MAAO,IAAIlJ,IACX4P,QAAS,IAAI5P,IACb6P,MAAO,IAAI7P,IACX6D,MAAO,IAAI7D,KAGX8P,EAAQ,EACZ,MAAMzN,EAAkB,CACpB4M,SAAS,EACTM,aAAa,EACbD,eAAe,EACfH,cAAc,EACd1H,SAAS,EACTxC,QAAQ,GAEN8K,EAAY,CACdlU,OAAQ6P,KACRmE,MAAOnE,KACPsE,MAAOtE,MAELuE,EAA2BlN,EAAMmN,cAAgBnN,EAAMmN,aAAaC,gBACpEC,EAA6BtK,EAAmBgJ,EAAS/I,MACzDsK,EAA4BvK,EAAmBgJ,EAASP,gBACxD+B,EAAmCxB,EAASnB,eAAiBtM,EAAgBI,IAK7E8O,EAAehI,MAAOiI,IACxB,GAAInO,EAAgBoF,SAAW+I,EAAmB,CAC9C,MAAM/I,EAAUqH,EAAS2B,SACnBnO,SAAqBoO,KAAkBzL,cACjC0L,EAAyBjD,GAAS,GAC1CjG,IAAYsH,EAAWtH,SACvBsI,EAAUC,MAAM1M,KAAK,CACjBmE,WAGZ,GAEEmJ,EAAuBzS,GAAUkE,EAAgB8M,cACnDY,EAAUC,MAAM1M,KAAK,CACjB6L,aAAchR,IA0ChB0S,EAAsB,CAAC9R,EAAM+R,EAAsB3S,EAAOwH,KAC5D,MAAMH,EAAQ9E,EAAIgN,EAAS3O,GAC3B,GAAIyG,EAAO,CACP,MAAM3E,EAAeH,EAAI8O,EAAazQ,EAAMwB,EAAYpC,GAASuC,EAAIuB,EAAgBlD,GAAQZ,GAC7FoC,EAAYM,IACP8E,GAAOA,EAAIoL,gBACZD,EACEvM,EAAIiL,EAAazQ,EAAM+R,EAAuBjQ,EAAeyM,GAAc9H,EAAMC,KACjFuL,EAAcjS,EAAM8B,GAC1B6O,EAAOxG,OAASqH,GACpB,GAEEU,EAAsB,CAAClS,EAAMmS,EAAY5K,EAAa6K,EAAaC,KACrE,IAAIC,GAAoB,EACpBC,GAAkB,EACtB,MAAMC,EAAS,CACXxS,QAEJ,IAAKuH,GAAe6K,EAAa,CACzB9O,EAAgB4M,UAChBqC,EAAkBvC,EAAWE,QAC7BF,EAAWE,QAAUsC,EAAOtC,QAAUuC,IACtCH,EAAoBC,IAAoBC,EAAOtC,SAEnD,MAAMwC,EAAyBxF,GAAUvL,EAAIuB,EAAgBlD,GAAOmS,GACpEI,EAAkB5Q,EAAIqO,EAAWQ,YAAaxQ,GAC9C0S,EACMrG,GAAM2D,EAAWQ,YAAaxQ,GAC9BwF,EAAIwK,EAAWQ,YAAaxQ,GAAM,GACxCwS,EAAOhC,YAAcR,EAAWQ,YAChC8B,EACIA,GACKhP,EAAgBkN,aACb+B,KAAqBG,CACrC,CACA,GAAInL,EAAa,CACb,MAAMoL,EAAyBhR,EAAIqO,EAAWO,cAAevQ,GACxD2S,IACDnN,EAAIwK,EAAWO,cAAevQ,EAAMuH,GACpCiL,EAAOjC,cAAgBP,EAAWO,cAClC+B,EACIA,GACKhP,EAAgBiN,eACboC,IAA2BpL,EAE/C,CAEA,OADA+K,GAAqBD,GAAgBrB,EAAUC,MAAM1M,KAAKiO,GACnDF,EAAoBE,EAAS,CAAC,CAAC,EAEpCI,EAAsB,CAAC5S,EAAM0I,EAASd,EAAOiL,KAC/C,MAAMC,EAAqBnR,EAAIqO,EAAW9J,OAAQlG,GAC5CyR,EAAoBnO,EAAgBoF,SACtCZ,EAAUY,IACVsH,EAAWtH,UAAYA,EAjHd,IAACnC,EA6Hd,GAXIvC,EAAM+O,YAAcnL,GAlHVrB,EAmHoB,IA7DjB,EAACvG,EAAM4H,KACxBpC,EAAIwK,EAAW9J,OAAQlG,EAAM4H,GAC7BoJ,EAAUC,MAAM1M,KAAK,CACjB2B,OAAQ8J,EAAW9J,QACrB,EAyDsC8M,CAAahT,EAAM4H,GAAvDkI,EAnHwBmD,IAC5BC,aAAanC,GACbA,EAAQoC,WAAW5M,EAAU0M,EAAK,EAkH9BnD,EAAmB9L,EAAM+O,cAGzBG,aAAanC,GACbjB,EAAqB,KACrBlI,EACMpC,EAAIwK,EAAW9J,OAAQlG,EAAM4H,GAC7ByE,GAAM2D,EAAW9J,OAAQlG,KAE9B4H,GAASsF,GAAU4F,EAAoBlL,GAASkL,KAChDvP,EAAcsP,IACfpB,EAAmB,CACnB,MAAM2B,EAAmB,IAClBP,KACCpB,GAAqB3J,EAAUY,GAAW,CAAEA,WAAY,CAAC,EAC7DxC,OAAQ8J,EAAW9J,OACnBlG,QAEJgQ,EAAa,IACNA,KACAoD,GAEPpC,EAAUC,MAAM1M,KAAK6O,EACzB,CACAvB,GAAoB,EAAM,EAExBF,EAAiBnI,MAAOxJ,GAAS+P,EAAS2B,SAASjB,EAAaV,EAASsD,QAAS3E,GAAmB1O,GAAQ2E,EAAOwF,MAAOwE,EAASoB,EAASnB,aAAcmB,EAAStG,4BAgBpKmI,EAA2BpI,MAAOlD,EAAQgN,EAAsBD,EAAU,CAC5EE,OAAO,MAEP,IAAK,MAAMvT,KAAQsG,EAAQ,CACvB,MAAMG,EAAQH,EAAOtG,GACrB,GAAIyG,EAAO,CACP,MAAM,GAAEC,KAAOyL,GAAe1L,EAC9B,GAAIC,EAAI,CACJ,MAAM8M,EAAmB7O,EAAOmM,MAAM7Q,IAAIyG,EAAG1G,MACvCyT,QAAmBlK,GAAc9C,EAAOgK,EAAac,EAAkCxB,EAAStG,4BAA8B6J,EAAsBE,GAC1J,GAAIC,EAAW/M,EAAG1G,QACdqT,EAAQE,OAAQ,EACZD,GACA,OAGPA,IACI3R,EAAI8R,EAAY/M,EAAG1G,MACdwT,EACI7L,EAA0BqI,EAAW9J,OAAQuN,EAAY/M,EAAG1G,MAC5DwF,EAAIwK,EAAW9J,OAAQQ,EAAG1G,KAAMyT,EAAW/M,EAAG1G,OAClDqM,GAAM2D,EAAW9J,OAAQQ,EAAG1G,MAC1C,CACAmS,SACWP,EAAyBO,EAAYmB,EAAsBD,EAC1E,CACJ,CACA,OAAOA,EAAQE,KAAK,EAalBd,EAAY,CAACzS,EAAMe,KAAUf,GAAQe,GAAQyE,EAAIiL,EAAazQ,EAAMe,IACrEmM,GAAUwG,KAAaxQ,IACtByQ,EAAY,CAAC5T,EAAO+B,EAAc+C,IAAaH,EAAoB3E,EAAO4E,EAAQ,IAChFgM,EAAOxG,MACLsG,EACAjP,EAAYM,GACRoB,EACAuB,EAAS1E,GACL,CAAE,CAACA,GAAQ+B,GACXA,GACf+C,EAAU/C,GAEPmQ,EAAgB,CAACjS,EAAMZ,EAAOyJ,EAAU,CAAC,KAC3C,MAAMpC,EAAQ9E,EAAIgN,EAAS3O,GAC3B,IAAImS,EAAa/S,EACjB,GAAIqH,EAAO,CACP,MAAMmN,EAAiBnN,EAAMC,GACzBkN,KACCA,EAAexP,UACZoB,EAAIiL,EAAazQ,EAAMoO,GAAgBhP,EAAOwU,IAClDzB,EACIlK,EAAc2L,EAAehN,MAAQtH,EAAkBF,GACjD,GACAA,EACNuO,GAAiBiG,EAAehN,KAChC,IAAIgN,EAAehN,IAAIiC,SAASgL,SAASC,GAAeA,EAAUC,SAAW5B,EAAW1E,SAASqG,EAAU1U,SAEtGwU,EAAe9M,KAChB7H,EAAgB2U,EAAehN,KAC/BgN,EAAe9M,KAAKrD,OAAS,EACvBmQ,EAAe9M,KAAK+M,SAASG,KAAkBA,EAAYhC,iBAAmBgC,EAAY5P,YACvF4P,EAAYnU,QAAUJ,MAAMC,QAAQyS,KAC7BA,EAAWtO,MAAM9C,GAASA,IAASiT,EAAY5U,QACjD+S,IAAe6B,EAAY5U,SACnCwU,EAAe9M,KAAK,KACjB8M,EAAe9M,KAAK,GAAGjH,UAAYsS,GAG5CyB,EAAe9M,KAAK+M,SAASI,GAAcA,EAASpU,QAAUoU,EAAS7U,QAAU+S,IAGhFpK,EAAY6L,EAAehN,KAChCgN,EAAehN,IAAIxH,MAAQ,IAG3BwU,EAAehN,IAAIxH,MAAQ+S,EACtByB,EAAehN,IAAI3L,MACpB+V,EAAUlU,OAAOyH,KAAK,CAClBvE,OACAlD,OAAQ,IAAK2T,MAKjC,EACC5H,EAAQuJ,aAAevJ,EAAQqL,cAC5BhC,EAAoBlS,EAAMmS,EAAYtJ,EAAQqL,YAAarL,EAAQuJ,aAAa,GACpFvJ,EAAQsL,gBAAkBC,GAAQpU,EAAK,EAErCqU,EAAY,CAACrU,EAAMZ,EAAOyJ,KAC5B,IAAK,MAAMyL,KAAYlV,EAAO,CAC1B,MAAM+S,EAAa/S,EAAMkV,GACnBrP,EAAY,GAAGjF,KAAQsU,IACvB7N,EAAQ9E,EAAIgN,EAAS1J,IAC1BN,EAAOmM,MAAM7Q,IAAID,IACbiN,GAAYkF,MACZ1L,GAAUA,EAAMC,KAChBvH,EAAagT,GAEZF,EAAchN,EAAWkN,EAAYtJ,GADrCwL,EAAUpP,EAAWkN,EAAYtJ,EAE3C,GAEE0L,GAAW,CAACvU,EAAMZ,EAAOyJ,EAAU,CAAC,KACtC,MAAMpC,EAAQ9E,EAAIgN,EAAS3O,GACrB0J,EAAe/E,EAAOmM,MAAM7Q,IAAID,GAChCwU,EAAa1T,EAAY1B,GAC/BoG,EAAIiL,EAAazQ,EAAMwU,GACnB9K,GACAsH,EAAUF,MAAMvM,KAAK,CACjBvE,OACAlD,OAAQ,IAAK2T,MAEZnN,EAAgB4M,SAAW5M,EAAgBkN,cAC5C3H,EAAQuJ,aACRpB,EAAUC,MAAM1M,KAAK,CACjBvE,OACAwQ,YAAarC,GAAejL,EAAgBuN,GAC5CP,QAASuC,EAAUzS,EAAMwU,OAKjC/N,GAAUA,EAAMC,IAAOpH,EAAkBkV,GAEnCvC,EAAcjS,EAAMwU,EAAY3L,GADhCwL,EAAUrU,EAAMwU,EAAY3L,GAGtCvB,EAAUtH,EAAM2E,IAAWqM,EAAUC,MAAM1M,KAAK,IAAKyL,IACrDgB,EAAUlU,OAAOyH,KAAK,CAClBvE,OACAlD,OAAQ,IAAK2T,MAEhBE,EAAOxG,OAAS0F,GAAiB,EAEhCtN,GAAWiH,MAAO5J,IACpB,MAAM7E,EAAS6E,EAAM7E,OACrB,IAAIiF,EAAOjF,EAAOiF,KACdyU,GAAsB,EAC1B,MAAMhO,EAAQ9E,EAAIgN,EAAS3O,GAE3B,GAAIyG,EAAO,CACP,IAAImB,EACAc,EACJ,MAAMyJ,EAJyBpX,EAAOE,KAAOsT,GAAc9H,EAAMC,IAAM/G,EAAcC,GAK/E2H,EAAc3H,EAAM3E,OAASiH,EAAOC,MAAQvC,EAAM3E,OAASiH,EAAOE,UAClEsS,GAAyB1F,GAAcvI,EAAMC,MAC9CqJ,EAAS2B,WACT/P,EAAIqO,EAAW9J,OAAQlG,KACvByG,EAAMC,GAAGiO,MACVtF,GAAe9H,EAAa5F,EAAIqO,EAAWO,cAAevQ,GAAOgQ,EAAWT,YAAa+B,EAA2BD,GAClHuD,EAAUtN,EAAUtH,EAAM2E,EAAQ4C,GACxC/B,EAAIiL,EAAazQ,EAAMmS,GACnB5K,GACAd,EAAMC,GAAGvK,QAAUsK,EAAMC,GAAGvK,OAAOyD,GACnCkQ,GAAsBA,EAAmB,IAEpCrJ,EAAMC,GAAGnE,UACdkE,EAAMC,GAAGnE,SAAS3C,GAEtB,MAAMiT,EAAaX,EAAoBlS,EAAMmS,EAAY5K,GAAa,GAChE8K,GAAgB9O,EAAcsP,IAAe+B,EAOnD,IANCrN,GACGyJ,EAAUlU,OAAOyH,KAAK,CAClBvE,OACA/E,KAAM2E,EAAM3E,KACZ6B,OAAQ,IAAK2T,KAEjBiE,EAEA,OADApR,EAAgBoF,SAAW8I,IACnBa,GACJrB,EAAUC,MAAM1M,KAAK,CAAEvE,UAAU4U,EAAU,CAAC,EAAI/B,IAIxD,IAFCtL,GAAeqN,GAAW5D,EAAUC,MAAM1M,KAAK,IAAKyL,IACrD6B,GAAoB,GAChB9B,EAAS2B,SAAU,CACnB,MAAM,OAAExL,SAAiByL,EAAe,CAAC3R,IACnC6U,EAA4B5F,GAAkBe,EAAW9J,OAAQyI,EAAS3O,GAC1E8U,EAAoB7F,GAAkB/I,EAAQyI,EAASkG,EAA0B7U,MAAQA,GAC/F4H,EAAQkN,EAAkBlN,MAC1B5H,EAAO8U,EAAkB9U,KACzB0I,EAAUnF,EAAc2C,EAC5B,MAEI0B,SAAe2B,GAAc9C,EAAOgK,EAAac,EAAkCxB,EAAStG,4BAA4BzJ,GACxHyU,EACI1O,MAAMoM,IACFA,IAAexQ,EAAI8O,EAAazQ,EAAMmS,GAC1CsC,IACI7M,EACAc,GAAU,EAELpF,EAAgBoF,UACrBA,QAAgBkJ,EAAyBjD,GAAS,KAI1D8F,IACAhO,EAAMC,GAAGiO,MACLP,GAAQ3N,EAAMC,GAAGiO,MACrB/B,EAAoB5S,EAAM0I,EAASd,EAAOiL,GAElD,GAEEuB,GAAU5K,MAAOxJ,EAAM6I,EAAU,CAAC,KACpC,IAAIH,EACA0D,EACJ,MAAM2I,EAAajR,EAAsB9D,GAEzC,GADA6R,GAAoB,GAChB9B,EAAS2B,SAAU,CACnB,MAAMxL,OAzOsBsD,OAAOzJ,IACvC,MAAM,OAAEmG,SAAiByL,EAAe5R,GACxC,GAAIA,EACA,IAAK,MAAMC,KAAQD,EAAO,CACtB,MAAM6H,EAAQjG,EAAIuE,EAAQlG,GAC1B4H,EACMpC,EAAIwK,EAAW9J,OAAQlG,EAAM4H,GAC7ByE,GAAM2D,EAAW9J,OAAQlG,EACnC,MAGAgQ,EAAW9J,OAASA,EAExB,OAAOA,CAAM,EA4NY8O,CAA4BxT,EAAYxB,GAAQA,EAAO+U,GAC5ErM,EAAUnF,EAAc2C,GACxBkG,EAAmBpM,GACZ+U,EAAWvN,MAAMxH,GAAS2B,EAAIuE,EAAQlG,KACvC0I,CACV,MACS1I,GACLoM,SAA0B6I,QAAQvS,IAAIqS,EAAW/P,KAAIwE,MAAOvE,IACxD,MAAMwB,EAAQ9E,EAAIgN,EAAS1J,GAC3B,aAAa2M,EAAyBnL,GAASA,EAAMC,GAAK,CAAE,CAACzB,GAAYwB,GAAUA,EAAM,MACxF2C,MAAM7H,UACR6K,GAAqB4D,EAAWtH,UAAY8I,KAG/CpF,EAAmB1D,QAAgBkJ,EAAyBjD,GAchE,OAZAqC,EAAUC,MAAM1M,KAAK,KACZE,EAASzE,IACTsD,EAAgBoF,SAAWA,IAAYsH,EAAWtH,QACjD,CAAC,EACD,CAAE1I,WACJ+P,EAAS2B,WAAa1R,EAAO,CAAE0I,WAAY,CAAC,EAChDxC,OAAQ8J,EAAW9J,OACnBkK,cAAc,IAElBvH,EAAQqM,cACH9I,GACD/F,EAAasI,GAAUvN,GAAQA,GAAOO,EAAIqO,EAAW9J,OAAQ9E,IAAMpB,EAAO+U,EAAapQ,EAAOwF,OAC3FiC,CAAgB,EAErBsH,GAAaqB,IACf,MAAMjY,EAAS,IACRoG,KACCyN,EAAOxG,MAAQsG,EAAc,CAAC,GAEtC,OAAOjP,EAAYuT,GACbjY,EACA2H,EAASsQ,GACLpT,EAAI7E,EAAQiY,GACZA,EAAW/P,KAAKhF,GAAS2B,EAAI7E,EAAQkD,IAAM,EAEnDmV,GAAgB,CAACnV,EAAM6C,KAAc,CACvCuS,UAAWzT,GAAKkB,GAAamN,GAAY9J,OAAQlG,GACjDkQ,UAAWvO,GAAKkB,GAAamN,GAAYQ,YAAaxQ,GACtDsP,YAAa3N,GAAKkB,GAAamN,GAAYO,cAAevQ,GAC1D4H,MAAOjG,GAAKkB,GAAamN,GAAY9J,OAAQlG,KAS3CqV,GAAW,CAACrV,EAAM4H,EAAOiB,KAC3B,MAAMjC,GAAOjF,EAAIgN,EAAS3O,EAAM,CAAE0G,GAAI,CAAC,IAAKA,IAAM,CAAC,GAAGE,IACtDpB,EAAIwK,EAAW9J,OAAQlG,EAAM,IACtB4H,EACHhB,QAEJoK,EAAUC,MAAM1M,KAAK,CACjBvE,OACAkG,OAAQ8J,EAAW9J,OACnBwC,SAAS,IAEbG,GAAWA,EAAQqM,aAAetO,GAAOA,EAAIC,OAASD,EAAIC,OAAO,EAO/DyO,GAAa,CAACtV,EAAM6I,EAAU,CAAC,KACjC,IAAK,MAAM5D,KAAajF,EAAO8D,EAAsB9D,GAAQ2E,EAAOwF,MAChExF,EAAOwF,MAAMoL,OAAOtQ,GACpBN,EAAOmM,MAAMyE,OAAOtQ,GACf4D,EAAQ2M,YACTnJ,GAAMsC,EAAS1J,GACfoH,GAAMoE,EAAaxL,KAEtB4D,EAAQ4M,WAAapJ,GAAM2D,EAAW9J,OAAQjB,IAC9C4D,EAAQ6M,WAAarJ,GAAM2D,EAAWQ,YAAavL,IACnD4D,EAAQ8M,aAAetJ,GAAM2D,EAAWO,cAAetL,IACvD8K,EAASW,mBACL7H,EAAQ+M,kBACTvJ,GAAMnJ,EAAgB+B,GAE9B+L,EAAUlU,OAAOyH,KAAK,CAClBzH,OAAQ,IAAK2T,KAEjBO,EAAUC,MAAM1M,KAAK,IACdyL,KACEnH,EAAQ6M,UAAiB,CAAExF,QAASuC,KAAhB,CAAC,KAE7B5J,EAAQgN,aAAerE,GAAc,EAEpCsE,GAAuB,EAAG1R,WAAUpE,OAAMyG,QAAOH,aACnD,GAAIwB,EAAU1D,GAAW,CACrB,MAAMhF,EAAQgF,OACR1C,EACAC,EAAI8O,EAAazQ,EAAMuO,GAAc9H,EAAQA,EAAMC,GAAK/E,EAAI2E,EAAQtG,GAAM0G,KAChFlB,EAAIiL,EAAazQ,EAAMZ,GACvB8S,EAAoBlS,EAAMZ,GAAO,GAAO,GAAO,EACnD,GAEE2W,GAAW,CAAC/V,EAAM6I,EAAU,CAAC,KAC/B,IAAIpC,EAAQ9E,EAAIgN,EAAS3O,GACzB,MAAMgW,EAAoBlO,EAAUe,EAAQzE,UAqB5C,OApBAoB,EAAImJ,EAAS3O,EAAM,IACXyG,GAAS,CAAC,EACdC,GAAI,IACID,GAASA,EAAMC,GAAKD,EAAMC,GAAK,CAAEE,IAAK,CAAE5G,SAC5CA,OACAmK,OAAO,KACJtB,KAGXlE,EAAOwF,MAAMpF,IAAI/E,GACbyG,EACAqP,GAAqB,CACjBrP,QACArC,SAAUyE,EAAQzE,SAClBpE,SAIJ8R,EAAoB9R,GAAM,EAAM6I,EAAQzJ,OAErC,IACC4W,EAAoB,CAAE5R,SAAUyE,EAAQzE,UAAa,CAAC,KACtD2L,EAASkG,YACP,CACEtM,WAAYd,EAAQc,SACpBG,IAAK+E,GAAahG,EAAQiB,KAC1BC,IAAK8E,GAAahG,EAAQkB,KAC1BF,UAAWgF,GAAahG,EAAQgB,WAChCD,UAAWiF,GAAahG,EAAQe,WAChCI,QAAS6E,GAAahG,EAAQmB,UAEhC,CAAC,EACPhK,OACAuC,YACApG,OAAQoG,GACRqE,IAAMA,IACF,GAAIA,EAAK,CACLmP,GAAS/V,EAAM6I,GACfpC,EAAQ9E,EAAIgN,EAAS3O,GACrB,MAAMkW,EAAW1U,EAAYoF,EAAIxH,QAC3BwH,EAAIuP,kBACAvP,EAAIuP,iBAAiB,yBAAyB,IAElDvP,EACAwP,EAAkB1L,GAAkBwL,GACpCpP,EAAOL,EAAMC,GAAGI,MAAQ,GAC9B,GAAIsP,EACEtP,EAAKjD,MAAMiF,GAAWA,IAAWoN,IACjCA,IAAazP,EAAMC,GAAGE,IACxB,OAEJpB,EAAImJ,EAAS3O,EAAM,CACf0G,GAAI,IACGD,EAAMC,MACL0P,EACE,CACEtP,KAAM,IACCA,EAAKxF,OAAOsM,IACfsI,KACIzW,MAAMC,QAAQiC,EAAIuB,EAAgBlD,IAAS,CAAC,CAAC,GAAK,IAE1D4G,IAAK,CAAE3L,KAAMib,EAASjb,KAAM+E,SAE9B,CAAE4G,IAAKsP,MAGrBpE,EAAoB9R,GAAM,OAAO0B,EAAWwU,EAChD,MAEIzP,EAAQ9E,EAAIgN,EAAS3O,EAAM,CAAC,GACxByG,EAAMC,KACND,EAAMC,GAAGyD,OAAQ,IAEpB4F,EAASW,kBAAoB7H,EAAQ6H,qBAChC5Q,EAAmB6E,EAAOmM,MAAO9Q,KAAS2Q,EAAOC,SACnDjM,EAAOkM,QAAQ9L,IAAI/E,EAC3B,EAEP,EAECqW,GAAc,IAAMtG,EAASJ,kBAC/BtJ,EAAasI,GAAUvN,GAAQA,GAAOO,EAAIqO,EAAW9J,OAAQ9E,IAAMuD,EAAOwF,OACxEmM,GAAe,CAACC,EAASC,IAAchN,MAAOxP,IAC5CA,IACAA,EAAEyc,gBAAkBzc,EAAEyc,iBACtBzc,EAAE0c,SAAW1c,EAAE0c,WAEnB,IAAIC,EAAc7V,EAAY2P,GAI9B,GAHAO,EAAUC,MAAM1M,KAAK,CACjB8L,cAAc,IAEdN,EAAS2B,SAAU,CACnB,MAAM,OAAExL,EAAM,OAAEpJ,SAAiB6U,IACjC3B,EAAW9J,OAASA,EACpByQ,EAAc7Z,CAClB,YAEU8U,EAAyBjD,GAEnCtC,GAAM2D,EAAW9J,OAAQ,QACrB3C,EAAcyM,EAAW9J,SACzB8K,EAAUC,MAAM1M,KAAK,CACjB2B,OAAQ,CAAC,UAEPqQ,EAAQI,EAAa3c,KAGvBwc,SACMA,EAAU,IAAKxG,EAAW9J,QAAUlM,GAE9Cqc,KACAlD,WAAWkD,KAEfrF,EAAUC,MAAM1M,KAAK,CACjBgL,aAAa,EACbc,cAAc,EACdC,mBAAoB/M,EAAcyM,EAAW9J,QAC7C+J,YAAaD,EAAWC,YAAc,EACtC/J,OAAQ8J,EAAW9J,QACrB,EA2BA0Q,GAAS,CAAChS,EAAYiS,EAAmB,CAAC,KAC5C,MAAMC,EAAgBlS,EAAa9D,EAAY8D,GAAc1B,EACvD6T,EAAqBjW,EAAYgW,GACjCha,EAAS8H,IAAerB,EAAcqB,GACtCmS,EACA7T,EAIN,GAHK2T,EAAiBG,oBAClB9T,EAAiB4T,IAEhBD,EAAiBI,WAAY,CAC9B,GAAIJ,EAAiBzF,iBAAmBF,EACpC,IAAK,MAAMjM,KAAaN,EAAOwF,MAC3BxI,EAAIqO,EAAWQ,YAAavL,GACtBO,EAAI1I,EAAQmI,EAAWtD,EAAI8O,EAAaxL,IACxCsP,GAAStP,EAAWtD,EAAI7E,EAAQmI,QAGzC,CACD,GAAItE,GAASa,EAAYoD,GACrB,IAAK,MAAM5E,KAAQ2E,EAAOwF,MAAO,CAC7B,MAAM1D,EAAQ9E,EAAIgN,EAAS3O,GAC3B,GAAIyG,GAASA,EAAMC,GAAI,CACnB,MAAMkN,EAAiBnU,MAAMC,QAAQ+G,EAAMC,GAAGI,MACxCL,EAAMC,GAAGI,KAAK,GACdL,EAAMC,GAAGE,IACf,GAAIqB,EAAc2L,GAAiB,CAC/B,MAAMsD,EAAOtD,EAAeuD,QAAQ,QACpC,GAAID,EAAM,CACNA,EAAKE,QACL,KACJ,CACJ,CACJ,CACJ,CAEJzI,EAAU,CAAC,CACf,CACA8B,EAAczM,EAAM0M,iBACdmG,EAAiBG,kBACblW,EAAYoC,GACZ,CAAC,EACLpC,EAAYhE,GAClBkU,EAAUF,MAAMvM,KAAK,CACjBzH,OAAQ,IAAKA,KAEjBkU,EAAUlU,OAAOyH,KAAK,CAClBzH,OAAQ,IAAKA,IAErB,CACA6H,EAAS,CACLwF,MAAO,IAAIlJ,IACX4P,QAAS,IAAI5P,IACb6P,MAAO,IAAI7P,IACX6D,MAAO,IAAI7D,IACXiE,UAAU,EACV2B,MAAO,KAEV8J,EAAOxG,OAAS0F,IACjBc,EAAOxG,OAAS7G,EAAgBoF,WAAamO,EAAiBhB,YAC9DlF,EAAO7L,QAAUd,EAAM0M,iBACvBM,EAAUC,MAAM1M,KAAK,CACjB0L,YAAa4G,EAAiBQ,gBACxBrH,EAAWC,YACX,EACNC,QAAS2G,EAAiBnB,UACpB1F,EAAWE,WACR2G,EAAiBG,mBACjB9J,GAAUtI,EAAY1B,IAC/BqM,cAAasH,EAAiBS,iBACxBtH,EAAWT,YAEjBiB,YAAaqG,EAAiBzF,gBACxBpB,EAAWQ,YACXqG,EAAiBG,mBAAqBpS,EAClCuJ,GAAejL,EAAgB0B,GAC/B,CAAC,EACX2L,cAAesG,EAAiBlB,YAC1B3F,EAAWO,cACX,CAAC,EACPrK,OAAQ2Q,EAAiBU,WAAavH,EAAW9J,OAAS,CAAC,EAC3DmK,cAAc,EACdC,oBAAoB,GACtB,EAEA8G,GAAQ,CAACxS,EAAYiS,IAAqBD,GAAO5O,EAAWpD,GAC5DA,EAAW6L,GACX7L,EAAYiS,GA2BlB,MAAO,CACH/T,QAAS,CACLiT,YACAT,cACAH,iBACAmB,gBACAjB,YACA1D,iBACAgC,YACAlB,YACAjB,eACAgG,iBAvjBiB,KACrB,IAAK,MAAMxX,KAAQ2E,EAAOkM,QAAS,CAC/B,MAAMpK,EAAQ9E,EAAIgN,EAAS3O,GAC3ByG,IACKA,EAAMC,GAAGI,KACJL,EAAMC,GAAGI,KAAKsC,OAAOxC,IAASgH,GAAKhH,MAClCgH,GAAKnH,EAAMC,GAAGE,OACrB0O,GAAWtV,EACnB,CACA2E,EAAOkM,QAAU,IAAI5P,GAAK,EA+iBtBwW,kBA/tBkB,CAACzX,EAAMlD,EAAS,GAAI4a,EAAQC,EAAMC,GAAkB,EAAMC,GAA6B,KAC7G,GAAIF,GAAQD,EAAQ,CAEhB,GADA/G,EAAOC,QAAS,EACZiH,GAA8BpY,MAAMC,QAAQiC,EAAIgN,EAAS3O,IAAQ,CACjE,MAAM2W,EAAce,EAAO/V,EAAIgN,EAAS3O,GAAO2X,EAAKG,KAAMH,EAAKI,MAC/DH,GAAmBpS,EAAImJ,EAAS3O,EAAM2W,EAC1C,CACA,GAAIkB,GACApY,MAAMC,QAAQiC,EAAIqO,EAAW9J,OAAQlG,IAAQ,CAC7C,MAAMkG,EAASwR,EAAO/V,EAAIqO,EAAW9J,OAAQlG,GAAO2X,EAAKG,KAAMH,EAAKI,MACpEH,GAAmBpS,EAAIwK,EAAW9J,OAAQlG,EAAMkG,GAChDuJ,GAAgBO,EAAW9J,OAAQlG,EACvC,CACA,GAAIsD,EAAgBiN,eAChBsH,GACApY,MAAMC,QAAQiC,EAAIqO,EAAWO,cAAevQ,IAAQ,CACpD,MAAMuQ,EAAgBmH,EAAO/V,EAAIqO,EAAWO,cAAevQ,GAAO2X,EAAKG,KAAMH,EAAKI,MAClFH,GAAmBpS,EAAIwK,EAAWO,cAAevQ,EAAMuQ,EAC3D,CACIjN,EAAgBkN,cAChBR,EAAWQ,YAAcrC,GAAejL,EAAgBuN,IAE5DO,EAAUC,MAAM1M,KAAK,CACjBvE,OACAkQ,QAASuC,EAAUzS,EAAMlD,GACzB0T,YAAaR,EAAWQ,YACxBtK,OAAQ8J,EAAW9J,OACnBwC,QAASsH,EAAWtH,SAE5B,MAEIlD,EAAIiL,EAAazQ,EAAMlD,EAC3B,EAgsBIgZ,wBACAkC,eApiBgBhY,GAASqB,EAAQM,EAAIgP,EAAOxG,MAAQsG,EAAcvN,EAAgBlD,EAAMgE,EAAM0M,iBAAmB/O,EAAIuB,EAAgBlD,EAAM,IAAM,KAqiBjJ4W,UACAqB,oBAvBoB,IAAMjQ,EAAW+H,EAAS9M,gBAClD8M,EAAS9M,gBAAgBiV,MAAMpb,IAC3Bsa,GAAMta,EAAQiT,EAASoB,cACvBH,EAAUC,MAAM1M,KAAK,CACjB4L,WAAW,GACb,IAmBFgI,iBA9BkB/E,IACtBpD,EAAa,IACNA,KACAoD,EACN,EA2BGpC,YACA1N,kBACA,WAAIqL,GACA,OAAOA,CACX,EACA,eAAI8B,GACA,OAAOA,CACX,EACA,UAAIE,GACA,OAAOA,CACX,EACA,UAAIA,CAAOvR,GACPuR,EAASvR,CACb,EACA,kBAAI8D,GACA,OAAOA,CACX,EACA,UAAIyB,GACA,OAAOA,CACX,EACA,UAAIA,CAAOvF,GACPuF,EAASvF,CACb,EACA,cAAI4Q,GACA,OAAOA,CACX,EACA,cAAIA,CAAW5Q,GACX4Q,EAAa5Q,CACjB,EACA,YAAI2Q,GACA,OAAOA,CACX,EACA,YAAIA,CAAS3Q,GACT2Q,EAAW,IACJA,KACA3Q,EAEX,GAEJgV,WACA2B,YACAO,gBACAxR,MAxWU,CAAC9E,EAAM8B,IAAiBkG,EAAWhI,GAC3CgR,EAAUlU,OAAOwH,UAAU,CACzBC,KAAO6T,GAAYpY,EAAK2T,OAAUjS,EAAWI,GAAesW,KAE9DzE,EAAU3T,EAAM8B,GAAc,GAqWhCyS,YACAb,aACA0D,SACAiB,WA1Me,CAACrY,EAAM6I,EAAU,CAAC,KAC7BlH,EAAIgN,EAAS3O,KACTwB,EAAYqH,EAAQ/G,cACpByS,GAASvU,EAAM2B,EAAIuB,EAAgBlD,KAGnCuU,GAASvU,EAAM6I,EAAQ/G,cACvB0D,EAAItC,EAAgBlD,EAAM6I,EAAQ/G,eAEjC+G,EAAQ8M,aACTtJ,GAAM2D,EAAWO,cAAevQ,GAE/B6I,EAAQ6M,YACTrJ,GAAM2D,EAAWQ,YAAaxQ,GAC9BgQ,EAAWE,QAAUrH,EAAQ/G,aACvB2Q,EAAUzS,EAAM2B,EAAIuB,EAAgBlD,IACpCyS,KAEL5J,EAAQ4M,YACTpJ,GAAM2D,EAAW9J,OAAQlG,GACzBsD,EAAgBoF,SAAW8I,KAE/BR,EAAUC,MAAM1M,KAAK,IAAKyL,IAC9B,EAoLAsI,YAjYiBtY,IACjBA,GACI8D,EAAsB9D,GAAM6T,SAAS0E,GAAclM,GAAM2D,EAAW9J,OAAQqS,KAChFvH,EAAUC,MAAM1M,KAAK,CACjB2B,OAAQlG,EAAOgQ,EAAW9J,OAAS,CAAC,GACtC,EA6XFoP,cACAD,YACAmD,SA9Fa,CAACxY,EAAM6I,EAAU,CAAC,KAC/B,MAAMpC,EAAQ9E,EAAIgN,EAAS3O,GACrB4T,EAAiBnN,GAASA,EAAMC,GACtC,GAAIkN,EAAgB,CAChB,MAAMsC,EAAWtC,EAAe9M,KAC1B8M,EAAe9M,KAAK,GACpB8M,EAAehN,IACjBsP,EAASrP,QACTqP,EAASrP,QACTgC,EAAQ4P,cAAgBvC,EAASwC,SAEzC,GAoFAvD,iBAER,C,eCzyEA,OAzBawD,KACT,MAAM,EAACrf,EAAY,EAACC,IAAkBZ,EAAAA,EAAAA,UAA2B,oBAAXa,OAAyBA,OAAOC,OAAOC,MAAO,MASpG,OAPAI,EAAAA,EAAAA,YAAU,KACe,oBAAXN,QACNA,OAAOO,iBAAiB,UAAUC,IAC9BT,EAAeC,OAAOC,OAAOC,MAAM,GAE3C,GACD,IAECQ,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,OAAK0e,MAAM,YACP1e,EAAAA,cAAA,OAAK0e,MAAM,eACP1e,EAAAA,cAAA,UAAQR,MAAOJ,EAAc,IAAM,MAAK,IAAMA,EAAc,IAAMuf,OAAO,MAAMnd,GAAG,cAAcnB,IAAI,6GAA6Gue,YAAY,IAAIC,UAAU,KAAKC,aAAa,IAAIC,YAAY,MAE7Q/e,EAAAA,cAAA,WACAA,EAAAA,cAAA,sEAEAA,EAAAA,cAAA,qGAGT,E,oBCZX,OATgBgf,IAERhf,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,OAAKG,UAAU,oBACXH,EAAAA,cAAA,OAAKG,UAAU,a,mCC6J/B,OAnJqBlC,IAGd,IAHe,SAElBC,GACHD,EAEG,MAAMG,GAAWC,EAAAA,EAAAA,YAAWC,GAAAA,KACtB,EAAC2gB,EAAK,EAACC,IAAWzgB,EAAAA,EAAAA,WAAS,IAC3B,EAACiP,EAAM,EAACyN,IAAY1c,EAAAA,EAAAA,WAAS,IAC7B,EAAC0gB,EAAQ,EAACC,IAAc3gB,EAAAA,EAAAA,WAAS,GACjCN,GAAOwF,EAAAA,GAAAA,GAAQzF,IAEf,aAAEke,EAAY,SAAEP,EAAQ,MAAEqB,GHu0EpC,SAAiBpT,EAAQ,CAAC,GACtB,MAAMuV,EAAe,WACfC,EAAU,YACT3W,EAAWe,GAAmB,WAAe,CAChDsM,SAAS,EACTE,cAAc,EACdD,UAAWnI,EAAWhE,EAAMf,eAC5BsM,aAAa,EACbc,cAAc,EACdC,oBAAoB,EACpB5H,SAAS,EACTuH,YAAa,EACbO,YAAa,CAAC,EACdD,cAAe,CAAC,EAChBrK,OAAQ,CAAC,EACTjD,cAAe+E,EAAWhE,EAAMf,oBAC1BvB,EACAsC,EAAMf,gBAEXsW,EAAarV,UACdqV,EAAarV,QAAU,IAChB0L,GAAkB5L,GAAO,IAAMJ,GAAiBf,IAAc,IAAMA,QACvEA,cAGR,MAAMC,EAAUyW,EAAarV,QAAQpB,QA+BrC,OA9BAA,EAAQiN,SAAW/L,EACnBD,EAAa,CACTM,QAASvB,EAAQkO,UAAUC,MAC3B1M,KAAOnF,IACCsE,EAAsBtE,EAAO0D,EAAQQ,gBAAiBR,EAAQqV,kBAAkB,IAChFvU,EAAgB,IAAKd,EAAQkN,YACjC,IAGR,aAAgB,KACRhM,EAAMlH,SAAWoQ,GAAUlJ,EAAMlH,OAAQ0c,EAAQtV,UACjDpB,EAAQ8T,OAAO5S,EAAMlH,OAAQgG,EAAQiN,SAASoB,cAC9CqI,EAAQtV,QAAUF,EAAMlH,QAGxBgG,EAAQmV,qBACZ,GACD,CAACjU,EAAMlH,OAAQgG,IAClB,aAAgB,KACPA,EAAQ6N,OAAOxG,QAChBrH,EAAQ0O,eACR1O,EAAQ6N,OAAOxG,OAAQ,GAEvBrH,EAAQ6N,OAAO7L,QACfhC,EAAQ6N,OAAO7L,OAAQ,EACvBhC,EAAQkO,UAAUC,MAAM1M,KAAK,IAAKzB,EAAQkN,cAE9ClN,EAAQ0U,kBAAkB,IAE9B+B,EAAarV,QAAQrB,UAAYD,EAAkBC,EAAWC,GACvDyW,EAAarV,OACxB,CGh4E8CuV,CAAQ,CAAC,IAEnD3f,EAAAA,EAAAA,YAAU,KC9Bc4f,EAACzI,EAAO3Y,KACZ,iBAAV2Y,GACgB,OAAnBA,EAAM0I,UAAqB1I,EAAM7P,KAChC9I,EAAS,CACL2C,KAAM,MAGlB,EDwBIye,CAAalgB,OAAOpB,SAAS6Y,MAAO3Y,EAAS,GAC9C,IAEH,MAoCMshB,EAAW5f,KACa,qBAAvBA,EAAEe,OAAOV,WAGoB,gBAAvBL,EAAEe,OAAOV,aAFd+e,GAAQ,GACR/D,GAAS,GAIb,EAGE7S,EAAWgH,UAEb,GADA8P,GAAW,GACRvY,EAAK8Y,KAAK,CACT,IAS2B,aARAC,MAAM,4DAA6D,CACtFpC,OAAQ,OACR1Q,KAAM,OACN+S,QAAS,CACL,8BAA+B,KAEnCC,KAAM,IAAIC,gBAAgBlZ,MAElBmZ,SACU,oBAAX1gB,QAA0BA,OAAO2gB,KAAK,QAAS,sBAAuB,CACzEle,MAAO,gBAEXqd,GAAW,GACXF,GAAQ,GAEhB,CAAC,MAAMgB,GACHC,QAAQzS,MAAMwS,EAClB,CACAhD,GACJ,MACI/B,GAAS,GACTiE,GAAW,EACf,EA8CJ,OACIpf,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAACogB,GAAAA,EAAI,CAACC,UAAWjf,GAAAA,EAAS2B,QAAQhB,MAAM5D,KACxC6B,EAAAA,cAACsgB,GAAAA,EAAM,CAAC7c,aAAcvF,GACjBihB,GAxHLnf,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,OAAKG,UAAU,oBACXH,EAAAA,cAAA,OAAKG,UAAU,qCACXH,EAAAA,cAACgf,GAAO,SAsHfC,GA9GLjf,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,OAAK6B,QAAS/B,GAAK4f,EAAQ5f,GAAIK,UAAU,oBACrCH,EAAAA,cAAA,OAAKG,UAAU,mBACXH,EAAAA,cAAA,QAAM6B,QAAS/B,GAAK4f,EAAQ5f,GAAIK,UAAU,eAAc,KACxDH,EAAAA,cAAA,MAAIG,UAAU,eAAeiB,GAAAA,EAASmf,MAAMC,eAAeze,MAAM5D,IACjE6B,EAAAA,cAAA,KAAGG,UAAU,iBAAiBiB,GAAAA,EAASmf,MAAMC,eAAevU,QAAQ9N,OA0G3EuP,GAlGL1N,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,OAAK6B,QAAS/B,GAAK4f,EAAQ5f,GAAIK,UAAU,oBACrCH,EAAAA,cAAA,OAAKG,UAAU,yBACXH,EAAAA,cAAA,QAAM6B,QAAS/B,GAAK4f,EAAQ5f,GAAIK,UAAU,eAAc,KACxDH,EAAAA,cAAA,KAAGG,UAAU,iBAAiBiB,GAAAA,EAASmf,MAAME,aAAatiB,OAoEtE6B,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,OAAKG,UAAU,6BACXH,EAAAA,cAAA,WACIA,EAAAA,cAAA,UAAKoB,GAAAA,EAAS2B,QAAQhB,MAAM5D,IAxBxC6B,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,QAAMsI,SAAU8T,EAAa9T,IACzBtI,EAAAA,cAAA,SAAIoB,GAAAA,EAAS2B,QAAQia,KAAKjb,MAAM5D,IAChC6B,EAAAA,cAAA,QAAAiJ,OAAAyX,OAAA,CAAOjR,UAAQ,GAAKoM,EAAS,QAAO,CAAE9a,KAAK,OAAO+E,KAAK,OAAO6a,YAAavf,GAAAA,EAAS2B,QAAQia,KAAKlX,KAAK3H,MACtG6B,EAAAA,cAAA,QAAAiJ,OAAAyX,OAAA,CAAOjR,UAAQ,GAAKoM,EAAS,SAAQ,CAAE9a,KAAK,QAAQ+E,KAAK,QAAQ6a,YAAavf,GAAAA,EAAS2B,QAAQia,KAAK4D,MAAMziB,MAC1G6B,EAAAA,cAAA,WACIA,EAAAA,cAAA,WAAAiJ,OAAAyX,OAAA,CAAUjR,UAAQ,GAAKoM,EAAS,WAAU,CAAE/V,KAAK,UAAUtE,GAAG,UAAUqf,KAAK,KAAKC,KAAK,KAAKH,YAAavf,GAAAA,EAAS2B,QAAQia,KAAK/Q,QAAQ9N,OAE3I6B,EAAAA,cAAA,OAAKwB,GAAG,YACJxB,EAAAA,cAAA,OAAKG,UAAU,YACXH,EAAAA,cAAA,QAAAiJ,OAAAyX,OAAA,GAAW7E,EAAS,QAAO,CAAE1b,UAAU,iBAAiBY,KAAK,WAAW+E,KAAK,UAC7E9F,EAAAA,cAAA,SAAO+gB,IAAI,QAAQ3f,GAAAA,EAAS2B,QAAQia,KAAKgE,OAAO7iB,KAEpD6B,EAAAA,cAACihB,GAAAA,EAAM,CAAClgB,KAAK,SAASkD,MAAM,eAAe7C,GAAAA,EAAS2B,QAAQia,KAAKkE,KAAK/iB,QAc1E6B,EAAAA,cAAA,WACIA,EAAAA,cAAA,OAAKG,UAAU,gBACXH,EAAAA,cAAA,SAAG,kBAAeA,EAAAA,cAAA,WAAK,iCAA+BoB,GAAAA,EAAS+f,OAAOC,QAAQjjB,IAC9E6B,EAAAA,cAAA,SAAG,kBAAeA,EAAAA,cAAA,WAAK,oBACvBA,EAAAA,cAAA,SAAG,uBAEHA,EAAAA,cAACye,GAAI,UAiBtB,C","sources":["webpack://vinumar-web/./src/components/navbarIndex/NavbarIndex.jsx","webpack://vinumar-web/./src/components/Layout/Layout.jsx","webpack://vinumar-web/./src/components/button/Button.jsx","webpack://vinumar-web/./node_modules/react-hook-form/dist/index.esm.mjs","webpack://vinumar-web/./src/components/gmap/Gmap.jsx","webpack://vinumar-web/./src/components/Loading/Loading.jsx","webpack://vinumar-web/./src/components/pages/Contacto.jsx","webpack://vinumar-web/./src/helpers/historyState.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\nimport { Link, navigate } from 'gatsby'\nimport { slide as Menu } from 'react-burger-menu'\nimport logo from '../../images/img/VIN_Logo_V2.svg'\nimport './navbarIndex.css'\nimport './navbarIndex-media.css'\nimport './navbarIndex-burger.css'\nimport {LangStateContext, LangDispatchContext} from '../GlobalContextProvider/GlobalContextProvider'\n\nimport { langText } from '../../lang'\nimport { usePrefix } from '../../hook/usePathname'\n\nconst NavbarIndex = ({ location, lang }) => {\n    const dispatch = useContext(LangDispatchContext)\n    // const { lang } = useContext(LangStateContext)\n    const [showProd, setShowProd] = useState(false)\n    const [showNosotros, setShowNosotros] = useState(false)\n    const [showLang, setShowLang] = useState(false)\n    const [scroll, setScroll] = useState()\n    const [size, setSize] = useState('415px')\n    const prefix = usePrefix(location)\n\n    const [screenWidth, setScreenWidth] = useState(typeof window !== 'undefined' && window.screen.width)\n\n    const scrollFunction = () => {\n        setScroll(window.scrollY)\n        if(window.scrollY > 215) {\n            setSize('214px')\n        }else {\n            const factor = window.scrollY\n            const newScroll = 415 - factor\n            setSize(`${newScroll}px`)\n        }\n    }\n\n    useEffect(() => {\n        if(typeof window !== 'undefined'){\n            window.addEventListener('resize', e => {\n                setScreenWidth(window.screen.width)\n            })\n        }\n    }, [])\n    \n    useEffect(() => {\n        window.addEventListener('scroll', scrollFunction)\n    }, [])\n\n    const renderLogo = () => {\n        return(\n            <div>\n                <Link  to='/'>\n                    <img className='navbar-logo' onScroll={onScroll}  src={logo} width={size} alt='Logo'/>\n                </Link>\n            </div>\n        )\n    }\n    const onScroll = (e) => {\n    }\n    const renderProd = () => {\n        return(\n            <>\n              <ul className='navbar-menu' onMouseLeave={() => closeSubMenu()} onBlur={() => closeSubMenu()} >\n                    {/* <li className='no-border'><Link className='navbar-list-sub-menu' to='/producto/extracto-piel-uva'>{t('Extractos de piel de uva')}</Link></li> */}\n                    <li className='no-border'><Link className='navbar-list-sub-menu' to={lang === 'es' ? '/producto/extracto-piel-uva' : '/en/product/grape-skin-extracts'}>{langText.navbar.products.grape_skin[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu' to={lang === 'es' ? '/producto/extracto-vino' : '/en/product/wine-extracts'}>{langText.navbar.products.wine_extracts[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu' to={lang === 'es' ? '/producto/taninos-uva' : '/en/product/grape-tannins'}>{langText.navbar.products.tannins[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu' to={lang === 'es' ? '/producto/extracto-nutricion-animal' : '/en/product/grape-polyphenols-animal-feed'}>{langText.navbar.products.nutri_animal[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu' to={lang === 'es' ? '/producto/extracto-de-semilla-de-uva' : '/en/product/grape-seed-extract'}>{langText.navbar.products.seed_extract[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu' to={lang === 'es' ? '/producto/alcoholes' : '/en/product/alcohols'}>{langText.navbar.products.alcohols[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu' to={lang === 'es' ? '/producto/pepita-de-uva' : '/en/product/grape-seed'}>{langText.navbar.products.grape_seed[lang]}</Link></li>\n                </ul>  \n            </>\n        )\n    }\n    const renderProdBurger = () => {\n        return(\n            <>\n              <ul className='navbar-menu-burger' onMouseLeave={() => closeSubMenu()} onBlur={() => closeSubMenu()} >\n                    <li className='no-border'><Link className='navbar-list-sub-menu-burger' to={lang === 'es' ? '/producto/extracto-piel-uva' : '/en/product/grape-skin-extracts'}>{langText.navbar.products.grape_skin[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu-burger' to={lang === 'es' ? '/producto/extracto-vino' : '/en/product/wine-extracts'}>{langText.navbar.products.wine_extracts[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu-burger' to={lang === 'es' ? '/producto/taninos-uva' : '/en/product/grape-tannins'}>{langText.navbar.products.tannins[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu' to={lang === 'es' ? '/producto/extracto-nutricion-animal' : '/en/product/grape-polyphenols-animal-feed'}>{langText.navbar.products.nutri_animal[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu-burger' to={lang === 'es' ? '/producto/extracto-de-semilla-de-uva' : '/en/product/grape-seed-extract'}>{langText.navbar.products.seed_extract[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu-burger' to={lang === 'es' ? '/producto/alcoholes' : '/en/product/alcohols'}>{langText.navbar.products.alcohols[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu-burger' to={lang === 'es' ? '/producto/pepita-de-uva' : '/en/product/grape-seed'}>{langText.navbar.products.grape_seed[lang]}</Link></li>\n                </ul>  \n            </>\n        )\n    }\n    const onHoverProd = () => {\n        setShowProd(true)\n        setShowNosotros(false)\n        setShowLang(false)\n    }\n    const renderNosotros = () => {\n        return(\n            <>\n                <ul className='navbar-menu' onMouseLeave={() => closeSubMenu()}>\n                    <li className='no-border' ><Link className='navbar-list-sub-menu' to={lang === 'es' ? '/sobre-nosotros/instalaciones' : '/en/about-us/facilities'}>{langText.navbar.about.resources[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu' to={lang === 'es' ? '/sobre-nosotros/nuestra-historia' : '/en/about-us/history'}>{langText.navbar.about.history[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu' to={lang === 'es' ? '/sobre-nosotros/valores' : '/en/about-us/values'}>{langText.navbar.about.values[lang]}</Link></li>\n                </ul> \n            </>\n        )\n    }\n    const renderNosotrosBurger = () => {\n        return(\n            <>\n                <ul className='navbar-menu-burger' onMouseLeave={() => closeSubMenu()}>\n                    <li className='no-border' ><Link className='navbar-list-sub-menu-burger' to={lang === 'es' ? '/sobre-nosotros/instalaciones' : '/en/about-us/facilities'}>{langText.navbar.about.resources[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu-burger' to={lang === 'es' ? '/sobre-nosotros/nuestra-historia' : '/en/about-us/history'}>{langText.navbar.about.history[lang]}</Link></li>\n                    <li><Link className='navbar-list-sub-menu-burger' to={lang === 'es' ? '/sobre-nosotros/valores' : '/en/about-us/values'}>{langText.navbar.about.values[lang]}</Link></li>\n                </ul> \n            </>\n        )\n    }\n    const onClickNosotros = () => {\n        setShowNosotros(true)\n        setShowProd(false)\n        setShowLang(false)\n    }\n    const closeSubMenu = () => {\n        if(showProd){\n            setShowProd(false)\n        }\n        if(showNosotros){\n            setShowNosotros(false)\n        }\n        if(showLang){\n            setShowLang(false)\n        }\n    }\n    \n    const onClickLang = (e) => {\n        if(lang.toUpperCase() === e.target.innerText) {\n            return\n        }\n        dispatch({ type: e.target.innerText})\n\n        const newLoc = location.pathname\n\n        const langPath = newLoc.slice(0,3)\n\n\n        if(prefix === 'en') {\n            navigate(langText.routing[newLoc])\n        }else {\n\n            navigate(`/en${langText.routing[newLoc]}/`)\n        }\n    }\n    const renderLang = () => {\n        return(\n            <>\n                <ul className='navbar-menu' onMouseLeave={() => closeSubMenu()}>\n                    <li className='no-border navbar-list-sub-menu li-lang' onClick={onClickLang}>ES</li>\n                    <li className='navbar-list-sub-menu li-lang' onClick={onClickLang}>EN</li>\n                </ul> \n            </>\n        )\n    }\n    const renderLangBurger = () => {\n        return(\n            <>\n                <ul className='navbar-menu-burger' onMouseLeave={() => closeSubMenu()}>\n                    <li className='no-border navbar-list-sub-menu-burger li-lang' onClick={onClickLang}>ES</li>\n                    <li className='navbar-list-sub-menu-burger li-lang' onClick={onClickLang}>EN</li>\n                </ul> \n            </>\n        )\n    }\n    const onHoverLang = () => {\n        setShowLang(true)\n        setShowNosotros(false)\n        setShowProd(false)\n    }\n    const renderListGeneral = () => {\n        return(\n            <ul id='page-wrap' className='navbar-list-general'>\n                <li className='navbar-list-element'><Link className='navbar-list-general-element' onMouseOver={closeSubMenu} to={lang === 'es' ? '/' : '/en'}>{langText.navbar.home[lang]}</Link></li>\n                <li className='navbar-list-element navbar-relative'>\n                    <p className='navbar-list-general-element' tabIndex='0' onClick={onHoverProd} onMouseOver={onHoverProd} >{langText.navbar.products.title[lang]}</p>\n                    {showProd && renderProd()}\n                </li>\n                <li className='navbar-list-element navbar-relative'>\n                    <p className='navbar-list-general-element' tabIndex='0' onMouseOver={onClickNosotros} to='/Nosotros'>{langText.navbar.about.title[lang]}</p>\n                    {showNosotros && renderNosotros()}\n                </li>\n                <li className='navbar-list-element'><Link className='navbar-list-general-element' onMouseOver={closeSubMenu} to={lang === 'es' ? '/donde-estamos' : '/en/where-we-are'}>{langText.navbar.where[lang]}</Link></li>\n                <li className='navbar-list-element'><Link className='navbar-list-general-element' onMouseOver={closeSubMenu} to={lang === 'es' ? '/sostenibilidad' : '/en/sustainability'}>{langText.navbar.sustainability[lang]}</Link></li>\n                <li className='navbar-list-element-contact'><Link className='navbar-list-general-element' onMouseOver={closeSubMenu} to={lang === 'es' ? '/contacto' : '/en/contact-us'}>{langText.navbar.contact[lang]}</Link></li>\n                <li className='navbar-list-element-lang'>\n                    <p className='navbar-list-general-element' onClick={onHoverLang} onMouseOver={onHoverLang} to='/'>{lang === 'es' ? 'ES' : 'EN'}</p>\n                    {/* <p className='navbar-list-general-element' onClick={onHoverLang} onMouseOver={onHoverLang} to='/'>{lang.toUpperCase()}</p> */}\n                        {showLang && renderLang()}\n                </li>\n            </ul>\n        )\n    }\n\n    const onClickProdBurger = () => {\n        setShowProd(!showProd)\n    }\n    const onClickNosotrosBurger = () => {\n        setShowNosotros(!showNosotros)\n    }\n    const onClickLangBurger = () => {\n        setShowLang(!showLang)\n    }\n    const renderBurger = () => {\n        return(\n            <>\n                <Menu right pageWrapId={'page-wrap'} outerContainerId={\"outer-container\"}>\n                    <ul id='page-wrap' className='navbar-burger-general'>\n                        <li className='navbar-burger-element'><Link className='navbar-burger-general-element' onMouseOver={closeSubMenu} to={lang === 'es' ? '/' : '/en'}>{langText.navbar.home[lang]}</Link></li>\n                        <li className='navbar-burger-element navbar-relative'>\n                            <p className='navbar-burger-general-element' tabIndex='0' onClick={onClickProdBurger} >{langText.navbar.products.title[lang]}</p>\n                            {showProd && renderProdBurger()}\n                        </li>\n                        <li className='navbar-burger-element navbar-relative'>\n                            <p className='navbar-burger-general-element' tabIndex='0' onClick={onClickNosotrosBurger} to='/Nosotros'>{langText.navbar.about.title[lang]}</p>\n                            {showNosotros && renderNosotrosBurger()}\n                        </li>\n                        <li className='navbar-burger-element'><Link className='navbar-burger-general-element' onMouseOver={closeSubMenu} to={lang === 'es' ? '/donde-estamos' : '/en/where-we-are'}>{langText.navbar.where[lang]}</Link></li>\n                        <li className='navbar-burger-element'><Link className='navbar-burger-general-element' onMouseOver={closeSubMenu} to={lang === 'es' ? '/sostenibilidad' : '/en/sustainability'}>{langText.navbar.sustainability[lang]}</Link></li>\n                        <li className='navbar-burger-element navbar-burger-element-contact'><Link className='navbar-burger-general-element' onMouseOver={closeSubMenu} to={lang === 'es' ? '/contacto' : '/en/contact-us'}>{langText.navbar.contact[lang]}</Link></li>\n                        <li className='navbar-burger-element navbar-burger-element-lang'>\n                            <p className='navbar-burger-general-element' onClick={onClickLangBurger} to='/'>{lang === 'es' ? 'ES' : 'EN'}</p>\n                                {showLang && renderLangBurger()}\n                            </li>\n                    </ul>  \n                </Menu>\n            </>\n        )\n    }\n\n    if(screenWidth > 1270) {\n        return(\n            <>\n                <div id=\"outer-container\" className='navbar-container'>\n                    {renderLogo()}\n                    {renderListGeneral()}\n                </div>\n            </>\n        )\n    }else {\n        return (\n            <>\n                <div id='outer-container' className='navbar-container'>\n                    {renderLogo()}\n                    {renderBurger()}\n                </div>\n            </>\n        )\n    }\n\n\n}\nexport default NavbarIndex","import React, { useState, createContext, useReducer, useContext } from 'react'\nimport Navbar from '../navbarIndex/NavbarIndex'\nimport Footer from '../footer/Footer'\nimport CookieConsent, { Cookies } from 'react-cookie-consent'\nimport { useLocation } from '@reach/router'\nimport { initializeAndTrack } from 'gatsby-plugin-gdpr-cookies'\nimport { } from 'gatsby-plugin-google-gtag'\nimport { graphql } from 'gatsby'\nimport { usePrefix } from '../../hook/usePathname'\nimport { useLang } from '../../hook/useLang'\nimport { LangDispatchContext, LangStateContext } from '../GlobalContextProvider/GlobalContextProvider'\n\nimport cookiesPolicy from '../../legal/spanish/Política_de_cookies_PDF_2.pdf'\n\nconst Layout = ({ children, pageLocation }) => {\n    const location = useLocation()\n    const lang = useLang(location)\n\n    const renderCookiesText = () => {\n        return (\n            <>\n                <div className='consent-container'>\n                    <p className='consent-title'>Esta página web usa cookies</p>\n                    <p>Utilizamos cookies propias para fines estrictamente funcionales (navegar por la página, visitar secciones), así como cookies analíticas propias y de terceros para reconocerte, conocer tus preferencias y ofrecerte información personalizada. \n                        Algunas de estas cookies de terceros son utilizadas para personalizar el contenido y los anuncios.  Si nos otorgas tu consentimiento a través del botón aceptar, se almacenarán en tu dispositivo. Además, puedes rechazarlas a través del botón Rechazar. \n                        Dispones de más información en nuestra <a href={cookiesPolicy} target='_blank'>Política de Cookies</a>.\n                    </p>\n                    <br />\n                    <p>\n                    Este banner se mantendrá activo hasta que indiques o decidas su aceptación o deshabilitación. Al rechazar, solo se aceptan las cookies funcionales.\n                    </p>\n                </div>\n            </>\n        )\n    }\n    const onAccept = () => {\n        initializeAndTrack(location)\n        // Cookies.set(\"gatsby-gdpr-google-tagmanager\", true)\n    }\n    const onDecline = () => {\n\n    }\n    return(\n        <>\n            <Navbar location={pageLocation} lang={lang} />\n            <CookieConsent\n            declineButtonText='Rechazar'\n            enableDeclineButton\n            buttonText='Aceptar'\n            style={{\n                backgroundColor: 'rgba(160, 46, 51, 0.7)'\n            }}\n            onAccept={onAccept}\n            buttonWrapperClasses='consent-container-btn'\n            buttonClasses='consent-btn-accept'\n            declineButtonClasses='consent-btn-decline'\n            cookieName='gatsby-gdpr'\n            // setDeclineCookie={false}\n            onDecline={onDecline}\n            >{renderCookiesText()}</CookieConsent>\n            <main>{children}</main>\n            <Footer lang={lang} />\n        </>\n    )\n}\nexport default Layout","import React from 'react'\nimport { Link, navigate } from 'gatsby'\nimport './button.css'\nimport './button-media.css'\n\nconst Button = ({ goTo, style, width, children, onClickButton, type }) => {\n\n    const onClick = (e) => {\n        if(onClickButton) {\n            onClickButton(e)\n        } else {\n            navigate(goTo)\n        }\n    }\n    return(\n        <>\n            <div className='button-component'>\n                {type \n                ? <button type={type}  className={`${style}`}>{children}</button>\n                : <button  className={`${style}`}  onClick={(e) => onClick(e)}>{children}</button> }\n                {/* <button  className={`${style}`}  onClick={(e) => onClick(e)}>{children}</button> */}\n            </div>\n        </>\n    )\n}\nexport default Button","import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n    if (!path || !isObject(obj)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj\n        ? isUndefined(obj[path])\n            ? defaultValue\n            : obj[path]\n        : result;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\n    ? name === signalName ||\n        (Array.isArray(name) &&\n            name.some((currentName) => currentName && exact && currentName === signalName))\n    : !name ||\n        !signalName ||\n        name === signalName ||\n        convertToArrayPayload(name).some((currentName) => currentName &&\n            (currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { watch } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n    }));\n    _registerProps.current = control.register(name, props.rules);\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        control._updateDisabledField({\n            disabled,\n            fields: control._fields,\n            name,\n        });\n    }, [disabled, name, control]);\n    return {\n        field: {\n            name,\n            value,\n            disabled,\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            for (const name of control._names.mount) {\n                formData.append(name, get(data, name));\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(action, {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f && callback(_f.name)) {\n                if (_f.ref.focus) {\n                    _f.ref.focus();\n                    break;\n                }\n                else if (_f.refs && _f.refs[0].focus) {\n                    _f.refs[0].focus();\n                    break;\n                }\n            }\n            else if (isObject(currentField)) {\n                focusFieldBy(currentField, callback);\n            }\n        }\n    }\n};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = compact(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nfunction append(data, value) {\n    return [...data, ...convertToArrayPayload(value)];\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nfunction prepend(data, value) {\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append$1 = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = append(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend$1 = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prepend(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            focusFieldBy(control._fields, (key) => !!key && key.startsWith(control._names.focus || ''));\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\n        append: React.useCallback(append$1, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nfunction createSubject() {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}, flushRootRender) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        errors: {},\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const shouldCaptureDirtyFields = props.resetOptions && props.resetOptions.keepDirtyValues;\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (value) => _proxyFormState.isValidating &&\n        _subjects.state.next({\n            isValidating: value,\n        });\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = get(_formState.dirtyFields, name);\n            isCurrentFieldPristine\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n        _updateIsValidating(false);\n    };\n    const _executeSchema = async (name) => _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name,\n            values: { ..._formValues },\n        });\n        !_state.mount && flushRootRender();\n    };\n    const onChange = async (event) => {\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            _updateIsValidating(true);\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                error = errorLookupResult.error;\n                name = errorLookupResult.name;\n                isValid = isEmptyObject(errors);\n            }\n            else {\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                isFieldValueUpdated =\n                    isNaN(fieldValue) ||\n                        fieldValue === get(_formValues, name, fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        _updateIsValidating(true);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n            isValidating: false,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            focusFieldBy(_fields, (key) => key && get(_formState.errors, key), name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ..._defaultValues,\n            ...(_state.mount ? _formValues : {}),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n        error: get((formState || _formState).errors, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        set(_formState.errors, name, {\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, }) => {\n        if (isBoolean(disabled)) {\n            const value = disabled\n                ? undefined\n                : get(_formValues, name, getFieldValue(field ? field._f : get(fields, name)._f));\n            set(_formValues, name, value);\n            updateTouchAndDirty(name, value, false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        focusFieldBy(_fields, (key) => key && get(_formState.errors, key), _names.mount);\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            await onValid(fieldValues, e);\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors),\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, get(_defaultValues, name));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, options.defaultValue);\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, get(_defaultValues, name))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const values = formValues && !isEmptyObject(formValues)\n            ? cloneUpdatedValues\n            : _defaultValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues || shouldCaptureDirtyFields) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        !_state.mount && flushRootRender();\n        _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: keepStateOptions.keepDirty\n                ? _formState.isDirty\n                : !!(keepStateOptions.keepDefaultValues &&\n                    !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: keepStateOptions.keepDirtyValues\n                ? _formState.dirtyFields\n                : keepStateOptions.keepDefaultValues && formValues\n                    ? getDirtyFields(_defaultValues, formValues)\n                    : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitting: false,\n            isSubmitSuccessful: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const _values = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        errors: {},\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props, () => updateFormState((formState) => ({ ...formState }))),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import React, { useState, useEffect } from 'react'\n\nconst Gmap = () => {\n    const [screenWidth, setScreenWidth] = useState(typeof window !== 'undefined' ? window.screen.width: 1920)\n\n    useEffect(() => {\n        if(typeof window !== 'undefined') {\n            window.addEventListener('resize', e => {\n                setScreenWidth(window.screen.width)\n            })\n        }\n    }, [])\n    return(\n        <>\n            <div class=\"mapouter\">\n                <div class=\"gmap_canvas\">\n                    <iframe width={screenWidth > 800 ? '688' : `${screenWidth - 50}`} height=\"520\" id=\"gmap_canvas\" src=\"https://maps.google.com/maps?q=carretera%20munera%205,%20villarrobledo&t=&z=17&ie=UTF8&iwloc=&output=embed\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\"></iframe>\n                    {/* <a href=\"https://123movies-to.org\">123movies</a> */}\n                    <br/>\n                    <style>{`.mapouter{text-align:right;height:600px;width:688px;}`}</style>\n                    {/* <a href=\"https://www.embedgooglemap.net\">how to put google maps on website</a> */}\n                    <style>{`.gmap_canvas {overflow:hidden;background:none!important;height:600px;width:688px;}`}</style>\n                </div>\n            </div>\n        </>\n    )\n}\nexport default Gmap\n\n// return(\n//     <>\n//         <div class=\"mapouter\">\n//             <div class=\"gmap_canvas\">\n//                 <iframe width=\"688\" height=\"520\" id=\"gmap_canvas\" src=\"https://maps.google.com/maps?q=carretera%20munera%205,%20villarrobledo&t=&z=17&ie=UTF8&iwloc=&output=embed\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\"></iframe>\n//                 <a href=\"https://123movies-to.org\">123movies</a>\n//                 <br/>\n//                 <style>{`.mapouter{position:relative;text-align:right;height:600px;width:688px;}`}</style>\n//                 <a href=\"https://www.embedgooglemap.net\">how to put google maps on website</a>\n//                 <style>{`.gmap_canvas {overflow:hidden;background:none!important;height:600px;width:688px;}`}</style>\n//             </div>\n//         </div>\n//     </>\n// )","import React from 'react'\nimport './loading.css'\n\nconst Loading = () => {\n    return (\n        <>\n            <div className='loader-container'>\n                <div className='loader'></div>\n            </div>\n        </>\n    )\n}\nexport default Loading","import React, { useContext, useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport Layout from '../Layout/Layout'\nimport Gmap from '../gmap/Gmap'\nimport Button from '../button/Button'\nimport Head from '../Head/Head'\nimport Loading from '../Loading/Loading'\n\nimport '../../styles/pages/contacto.css'\nimport '../../styles/pages/mediaQueries/contacto-media.css'\n\nimport { LangStateContext, LangDispatchContext } from '../GlobalContextProvider/GlobalContextProvider'\nimport { langText } from '../../lang'\nimport { historyState } from '../../helpers/historyState'\nimport { usePrefix } from '../../hook/usePathname'\nimport { useLang } from '../../hook/useLang'\n\nconst ContactoPage = ({\n    // lang,\n    location\n}) => {\n    // const { lang } = useContext(LangStateContext)\n    const dispatch = useContext(LangDispatchContext)\n    const [open, setOpen] = useState(false)\n    const [error, setError] = useState(false)\n    const [loading, setLoading] = useState(false)\n    const lang = useLang(location)\n\n    const { handleSubmit, register, reset } = useForm({})\n\n    useEffect(() =>{\n        historyState(window.location.state, dispatch)\n    }, [])\n\n    const renderLoading = () => {\n        return (\n            <>\n                <div className='alert-background'>\n                    <div className='alert-container loading-container'>\n                        <Loading />\n                    </div>\n                </div>\n            </>\n        )\n    }\n    const renderAlert = () => {\n        return (\n            <>\n                <div onClick={e => onClose(e)} className='alert-background'>\n                    <div className='alert-container'>\n                        <span onClick={e => onClose(e)} className='alert-close'>&times;</span>\n                        <h4 className='alert-title'>{langText.alert.messageSuccess.title[lang]}</h4>\n                        <p className='alert-message'>{langText.alert.messageSuccess.message[lang]}</p>\n                    </div>\n                </div>\n            </>\n        )\n    }\n    const renderError = () => {\n        return (\n            <>\n                <div onClick={e => onClose(e)} className='alert-background'>\n                    <div className='alert-container-error'>\n                        <span onClick={e => onClose(e)} className='alert-close'>&times;</span>\n                        <p className='alert-message'>{langText.alert.messageError[lang]}</p>\n                    </div>\n                </div>\n            </>\n        )\n    }\n    const onClose = (e) => {\n        if(e.target.className === 'alert-background'){\n            setOpen(false)\n            setError(false)\n        }else if(e.target.className === 'alert-close') {\n            setOpen(false)\n            setError(false)\n        }\n    }\n\n    const onSubmit = async (data) => {\n        setLoading(true)\n        if(data.rgpd){\n            try{\n                const response = await fetch('https://angry-mccarthy.217-160-209-206.plesk.page/contact', {\n                    method: 'POST',\n                    mode: 'cors',\n                    headers: {\n                        'Access-Control-Allow-Origin': '*'\n                    },\n                    body: new URLSearchParams(data)\n                })\n                if(response.status === 200) {\n                    typeof window !== 'undefined' && window.gtag('event', 'formulario_contacto', {\n                        title: 'web_vinumar'\n                    })\n                    setLoading(false)\n                    setOpen(true)\n                }\n            }catch(err) {\n                console.error(err)\n            }\n            reset()\n        }else {\n            setError(true)\n            setLoading(false)\n        }\n    }\n\n    const renderForm = () => {\n        return(\n            <>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <p>{langText.contact.form.title[lang]}</p>\n                    <input required {...register('name')} type=\"text\" name='name' placeholder={langText.contact.form.name[lang]} />\n                    <input required {...register('email')} type=\"email\" name='email' placeholder={langText.contact.form.email[lang]} />\n                    <div>\n                        <textarea required {...register('message')} name=\"message\" id=\"mensaje\" cols=\"48\" rows=\"15\" placeholder={langText.contact.form.message[lang]}></textarea>\n                    </div>\n                    <div id='checkbox' >\n                        <div className='send-div'>\n                            <input {...register('rgpd')} className='input-checkbox' type=\"checkbox\" name='rgpd' />\n                            <label for=\"rgpd\">{langText.contact.form.accept[lang]}</label>\n                        </div>\n                        <Button type='submit' style='send-button'>{langText.contact.form.send[lang]}</Button>\n                    </div>\n                </form>\n            </>\n        )\n    }\n    const renderContent = () => {\n        return(\n            <>\n                <div className='contact-content-container'>\n                    <div>\n                        <h4>{langText.contact.title[lang]}</h4>\n                        {renderForm()}\n                    </div>\n                    <div >\n                        <div className='contact-info'>\n                            <p>ctra. Munera, 5<br/>02600 Villarrobledo Albacete, {langText.common.country[lang]}</p>\n                            <p>T +34 967141500<br/> F +34 967144111</p>\n                            <p>vinumar@vinumar.es</p>\n                        </div>\n                            <Gmap />\n\n                    </div>\n\n                </div>\n            </>\n        )\n    }\n    return(\n        <>\n            <Head pageTitle={langText.contact.title[lang]}/>\n            <Layout pageLocation={location}>\n                {loading && renderLoading()}\n                {open && renderAlert()}\n                {error && renderError()}\n                {renderContent()}\n            </Layout>\n        </>\n    )\n}\nexport default ContactoPage","export const historyState = (state, dispatch) => {\n    if(typeof state === 'object'){\n        if(state.referrer === null && state.key){\n            dispatch({\n                type: 'EN'\n            })\n        }\n    }\n}"],"names":["_ref","location","lang","dispatch","useContext","LangDispatchContext","showProd","setShowProd","useState","showNosotros","setShowNosotros","showLang","setShowLang","scroll","setScroll","size","setSize","prefix","usePrefix","screenWidth","setScreenWidth","window","screen","width","scrollFunction","scrollY","factor","useEffect","addEventListener","e","renderLogo","React","Link","to","className","onScroll","src","logo","alt","onHoverProd","onClickNosotros","closeSubMenu","onClickLang","toUpperCase","target","innerText","type","newLoc","pathname","slice","navigate","langText","routing","onHoverLang","renderListGeneral","id","onMouseOver","navbar","home","tabIndex","onClick","products","title","onMouseLeave","onBlur","grape_skin","wine_extracts","tannins","nutri_animal","seed_extract","alcohols","grape_seed","about","resources","history","values","where","sustainability","contact","onClickProdBurger","onClickNosotrosBurger","onClickLangBurger","renderBurger","Menu","right","pageWrapId","outerContainerId","children","pageLocation","useLocation","useLang","Navbar","CookieConsent","declineButtonText","enableDeclineButton","buttonText","style","backgroundColor","onAccept","initializeAndTrack","buttonWrapperClasses","buttonClasses","declineButtonClasses","cookieName","onDecline","href","cookiesPolicy","Footer","goTo","onClickButton","isCheckBoxInput","element","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","HTMLElement","document","cloneObject","data","copy","Set","Blob","FileList","key","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","length","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","useSubscribe","props","_props","current","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","appendErrors","validateAllFieldCriteria","errors","message","types","focusFieldBy","fields","callback","fieldsNames","field","_f","currentField","ref","focus","refs","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","some","watchName","startsWith","updateFieldArrayRootError","error","fieldArrayErrors","isBoolean","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","options","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","isEmptyArray","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","flushRootRender","delayErrorCallback","_options","_formState","submitCount","isDirty","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","_formValues","shouldUnregister","_state","action","unMount","array","timer","_subjects","state","shouldCaptureDirtyFields","resetOptions","keepDirtyValues","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","_updateValid","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","_getWatch","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","invalid","setError","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","_updateDisabledField","register","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldValues","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","_removeUnmounted","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_getFieldArray","_resetDefaultValues","then","_updateFormState","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","select","Gmap","class","height","frameborder","scrolling","marginheight","marginwidth","Loading","open","setOpen","loading","setLoading","_formControl","_values","useForm","historyState","referrer","onClose","rgpd","fetch","headers","body","URLSearchParams","status","gtag","err","console","Head","pageTitle","Layout","alert","messageSuccess","messageError","assign","placeholder","email","cols","rows","for","accept","Button","send","common","country"],"sourceRoot":""}